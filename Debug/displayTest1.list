
displayTest1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ac8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001188  08004c50  08004c50  00005c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dd8  08005dd8  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005dd8  08005dd8  00007010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005dd8  08005dd8  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dd8  08005dd8  00006dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ddc  08005ddc  00006ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005de0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007010  2**0
                  CONTENTS
 10 .bss          00000478  20000010  20000010  00007010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000488  20000488  00007010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012de4  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a95  00000000  00000000  00019e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f60  00000000  00000000  0001c8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000be4  00000000  00000000  0001d820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e0cc  00000000  00000000  0001e404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014114  00000000  00000000  0003c4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0c78  00000000  00000000  000505e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010125c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003fa4  00000000  00000000  001012a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00105244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004c38 	.word	0x08004c38

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004c38 	.word	0x08004c38

080001c8 <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80001c8:	b590      	push	{r4, r7, lr}
 80001ca:	b08d      	sub	sp, #52	@ 0x34
 80001cc:	af02      	add	r7, sp, #8
 80001ce:	60b9      	str	r1, [r7, #8]
 80001d0:	4611      	mov	r1, r2
 80001d2:	461a      	mov	r2, r3
 80001d4:	4603      	mov	r3, r0
 80001d6:	73fb      	strb	r3, [r7, #15]
 80001d8:	460b      	mov	r3, r1
 80001da:	81bb      	strh	r3, [r7, #12]
 80001dc:	4613      	mov	r3, r2
 80001de:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 80001e0:	7bfb      	ldrb	r3, [r7, #15]
 80001e2:	2b1e      	cmp	r3, #30
 80001e4:	d964      	bls.n	80002b0 <ILI9341_DrawChar+0xe8>
 80001e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	db60      	blt.n	80002b0 <ILI9341_DrawChar+0xe8>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 80001ee:	68bb      	ldr	r3, [r7, #8]
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 80001f4:	68bb      	ldr	r3, [r7, #8]
 80001f6:	3301      	adds	r3, #1
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 80001fc:	68bb      	ldr	r3, [r7, #8]
 80001fe:	3302      	adds	r3, #2
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 8000204:	68bb      	ldr	r3, [r7, #8]
 8000206:	3303      	adds	r3, #3
 8000208:	781b      	ldrb	r3, [r3, #0]
 800020a:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 800020c:	7bfb      	ldrb	r3, [r7, #15]
 800020e:	3b20      	subs	r3, #32
 8000210:	7ffa      	ldrb	r2, [r7, #31]
 8000212:	fb02 f303 	mul.w	r3, r2, r3
 8000216:	3304      	adds	r3, #4
 8000218:	68ba      	ldr	r2, [r7, #8]
 800021a:	4413      	add	r3, r2
 800021c:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 800021e:	7fbb      	ldrb	r3, [r7, #30]
 8000220:	b29a      	uxth	r2, r3
 8000222:	7f7b      	ldrb	r3, [r7, #29]
 8000224:	b29c      	uxth	r4, r3
 8000226:	88f9      	ldrh	r1, [r7, #6]
 8000228:	89b8      	ldrh	r0, [r7, #12]
 800022a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800022c:	9300      	str	r3, [sp, #0]
 800022e:	4623      	mov	r3, r4
 8000230:	f000 fc1a 	bl	8000a68 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 8000234:	2300      	movs	r3, #0
 8000236:	627b      	str	r3, [r7, #36]	@ 0x24
 8000238:	e035      	b.n	80002a6 <ILI9341_DrawChar+0xde>
	{
		for (int i=0; i < fWidth; i++)
 800023a:	2300      	movs	r3, #0
 800023c:	623b      	str	r3, [r7, #32]
 800023e:	e02b      	b.n	8000298 <ILI9341_DrawChar+0xd0>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8000240:	7f3b      	ldrb	r3, [r7, #28]
 8000242:	6a3a      	ldr	r2, [r7, #32]
 8000244:	fb03 f202 	mul.w	r2, r3, r2
 8000248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800024a:	10db      	asrs	r3, r3, #3
 800024c:	f003 031f 	and.w	r3, r3, #31
 8000250:	4413      	add	r3, r2
 8000252:	3301      	adds	r3, #1
 8000254:	69ba      	ldr	r2, [r7, #24]
 8000256:	4413      	add	r3, r2
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 800025c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	2201      	movs	r2, #1
 8000264:	fa02 f303 	lsl.w	r3, r2, r3
 8000268:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 800026a:	7dfa      	ldrb	r2, [r7, #23]
 800026c:	7dbb      	ldrb	r3, [r7, #22]
 800026e:	4013      	ands	r3, r2
 8000270:	b2db      	uxtb	r3, r3
 8000272:	2b00      	cmp	r3, #0
 8000274:	d00d      	beq.n	8000292 <ILI9341_DrawChar+0xca>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 8000276:	6a3b      	ldr	r3, [r7, #32]
 8000278:	b29a      	uxth	r2, r3
 800027a:	89bb      	ldrh	r3, [r7, #12]
 800027c:	4413      	add	r3, r2
 800027e:	b298      	uxth	r0, r3
 8000280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000282:	b29a      	uxth	r2, r3
 8000284:	88fb      	ldrh	r3, [r7, #6]
 8000286:	4413      	add	r3, r2
 8000288:	b29b      	uxth	r3, r3
 800028a:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800028c:	4619      	mov	r1, r3
 800028e:	f000 fb85 	bl	800099c <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 8000292:	6a3b      	ldr	r3, [r7, #32]
 8000294:	3301      	adds	r3, #1
 8000296:	623b      	str	r3, [r7, #32]
 8000298:	7fbb      	ldrb	r3, [r7, #30]
 800029a:	6a3a      	ldr	r2, [r7, #32]
 800029c:	429a      	cmp	r2, r3
 800029e:	dbcf      	blt.n	8000240 <ILI9341_DrawChar+0x78>
	for (int j=0; j < fHeight; j++)
 80002a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002a2:	3301      	adds	r3, #1
 80002a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80002a6:	7f7b      	ldrb	r3, [r7, #29]
 80002a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80002aa:	429a      	cmp	r2, r3
 80002ac:	dbc5      	blt.n	800023a <ILI9341_DrawChar+0x72>
 80002ae:	e000      	b.n	80002b2 <ILI9341_DrawChar+0xea>
	if ((ch < 31) || (ch > 127)) return;
 80002b0:	bf00      	nop
			}
		}
	}
}
 80002b2:	372c      	adds	r7, #44	@ 0x2c
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd90      	pop	{r4, r7, pc}

080002b8 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b08a      	sub	sp, #40	@ 0x28
 80002bc:	af02      	add	r7, sp, #8
 80002be:	60f8      	str	r0, [r7, #12]
 80002c0:	60b9      	str	r1, [r7, #8]
 80002c2:	4611      	mov	r1, r2
 80002c4:	461a      	mov	r2, r3
 80002c6:	460b      	mov	r3, r1
 80002c8:	80fb      	strh	r3, [r7, #6]
 80002ca:	4613      	mov	r3, r2
 80002cc:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	3301      	adds	r3, #1
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	77bb      	strb	r3, [r7, #30]

	while (*str)
 80002dc:	e02d      	b.n	800033a <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	7818      	ldrb	r0, [r3, #0]
 80002e2:	88b9      	ldrh	r1, [r7, #4]
 80002e4:	88fa      	ldrh	r2, [r7, #6]
 80002e6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80002ec:	9300      	str	r3, [sp, #0]
 80002ee:	460b      	mov	r3, r1
 80002f0:	68b9      	ldr	r1, [r7, #8]
 80002f2:	f7ff ff69 	bl	80001c8 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	3b20      	subs	r3, #32
 80002fc:	7ffa      	ldrb	r2, [r7, #31]
 80002fe:	fb02 f303 	mul.w	r3, r2, r3
 8000302:	3304      	adds	r3, #4
 8000304:	68ba      	ldr	r2, [r7, #8]
 8000306:	4413      	add	r3, r2
 8000308:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 800030a:	69bb      	ldr	r3, [r7, #24]
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 8000310:	7dfb      	ldrb	r3, [r7, #23]
 8000312:	1c9a      	adds	r2, r3, #2
 8000314:	7fbb      	ldrb	r3, [r7, #30]
 8000316:	429a      	cmp	r2, r3
 8000318:	da07      	bge.n	800032a <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 800031a:	7dfb      	ldrb	r3, [r7, #23]
 800031c:	b29a      	uxth	r2, r3
 800031e:	88fb      	ldrh	r3, [r7, #6]
 8000320:	4413      	add	r3, r2
 8000322:	b29b      	uxth	r3, r3
 8000324:	3302      	adds	r3, #2
 8000326:	80fb      	strh	r3, [r7, #6]
 8000328:	e004      	b.n	8000334 <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 800032a:	7fbb      	ldrb	r3, [r7, #30]
 800032c:	b29a      	uxth	r2, r3
 800032e:	88fb      	ldrh	r3, [r7, #6]
 8000330:	4413      	add	r3, r2
 8000332:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	3301      	adds	r3, #1
 8000338:	60fb      	str	r3, [r7, #12]
	while (*str)
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d1cd      	bne.n	80002de <ILI9341_DrawText+0x26>
	}
}
 8000342:	bf00      	nop
 8000344:	bf00      	nop
 8000346:	3720      	adds	r7, #32
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4a06      	ldr	r2, [pc, #24]	@ (8000370 <HAL_SPI_TxCpltCallback+0x24>)
 8000358:	4293      	cmp	r3, r2
 800035a:	d104      	bne.n	8000366 <HAL_SPI_TxCpltCallback+0x1a>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800035c:	2201      	movs	r2, #1
 800035e:	2102      	movs	r1, #2
 8000360:	4804      	ldr	r0, [pc, #16]	@ (8000374 <HAL_SPI_TxCpltCallback+0x28>)
 8000362:	f001 fcdd 	bl	8001d20 <HAL_GPIO_WritePin>
  }
}
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	20000080 	.word	0x20000080
 8000374:	48000800 	.word	0x48000800

08000378 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
 800037e:	4603      	mov	r3, r0
 8000380:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000382:	bf00      	nop
 8000384:	4b08      	ldr	r3, [pc, #32]	@ (80003a8 <ILI9341_SPI_Tx+0x30>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	689b      	ldr	r3, [r3, #8]
 800038a:	f003 0302 	and.w	r3, r3, #2
 800038e:	2b02      	cmp	r3, #2
 8000390:	d1f8      	bne.n	8000384 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 8000392:	1dfb      	adds	r3, r7, #7
 8000394:	2201      	movs	r2, #1
 8000396:	4619      	mov	r1, r3
 8000398:	4803      	ldr	r0, [pc, #12]	@ (80003a8 <ILI9341_SPI_Tx+0x30>)
 800039a:	f003 fcc1 	bl	8003d20 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 800039e:	bf00      	nop
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20000080 	.word	0x20000080

080003ac <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	460b      	mov	r3, r1
 80003b6:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80003b8:	bf00      	nop
 80003ba:	4b08      	ldr	r3, [pc, #32]	@ (80003dc <ILI9341_SPI_TxBuffer+0x30>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	689b      	ldr	r3, [r3, #8]
 80003c0:	f003 0302 	and.w	r3, r3, #2
 80003c4:	2b02      	cmp	r3, #2
 80003c6:	d1f8      	bne.n	80003ba <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 80003c8:	887b      	ldrh	r3, [r7, #2]
 80003ca:	461a      	mov	r2, r3
 80003cc:	6879      	ldr	r1, [r7, #4]
 80003ce:	4803      	ldr	r0, [pc, #12]	@ (80003dc <ILI9341_SPI_TxBuffer+0x30>)
 80003d0:	f003 fca6 	bl	8003d20 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	20000080 	.word	0x20000080

080003e0 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	4603      	mov	r3, r0
 80003e8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 80003ea:	2200      	movs	r2, #0
 80003ec:	2108      	movs	r1, #8
 80003ee:	4808      	ldr	r0, [pc, #32]	@ (8000410 <ILI9341_WriteCommand+0x30>)
 80003f0:	f001 fc96 	bl	8001d20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80003f4:	2200      	movs	r2, #0
 80003f6:	2102      	movs	r1, #2
 80003f8:	4805      	ldr	r0, [pc, #20]	@ (8000410 <ILI9341_WriteCommand+0x30>)
 80003fa:	f001 fc91 	bl	8001d20 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	4618      	mov	r0, r3
 8000402:	f7ff ffb9 	bl	8000378 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	48000800 	.word	0x48000800

08000414 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 800041e:	2201      	movs	r2, #1
 8000420:	2108      	movs	r1, #8
 8000422:	4808      	ldr	r0, [pc, #32]	@ (8000444 <ILI9341_WriteData+0x30>)
 8000424:	f001 fc7c 	bl	8001d20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000428:	2200      	movs	r2, #0
 800042a:	2102      	movs	r1, #2
 800042c:	4805      	ldr	r0, [pc, #20]	@ (8000444 <ILI9341_WriteData+0x30>)
 800042e:	f001 fc77 	bl	8001d20 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	4618      	mov	r0, r3
 8000436:	f7ff ff9f 	bl	8000378 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800043a:	bf00      	nop
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	48000800 	.word	0x48000800

08000448 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	460b      	mov	r3, r1
 8000452:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000454:	2201      	movs	r2, #1
 8000456:	2108      	movs	r1, #8
 8000458:	4808      	ldr	r0, [pc, #32]	@ (800047c <ILI9341_WriteBuffer+0x34>)
 800045a:	f001 fc61 	bl	8001d20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 800045e:	2200      	movs	r2, #0
 8000460:	2102      	movs	r1, #2
 8000462:	4806      	ldr	r0, [pc, #24]	@ (800047c <ILI9341_WriteBuffer+0x34>)
 8000464:	f001 fc5c 	bl	8001d20 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8000468:	887b      	ldrh	r3, [r7, #2]
 800046a:	4619      	mov	r1, r3
 800046c:	6878      	ldr	r0, [r7, #4]
 800046e:	f7ff ff9d 	bl	80003ac <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000472:	bf00      	nop
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	48000800 	.word	0x48000800

08000480 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000480:	b590      	push	{r4, r7, lr}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
 8000486:	4604      	mov	r4, r0
 8000488:	4608      	mov	r0, r1
 800048a:	4611      	mov	r1, r2
 800048c:	461a      	mov	r2, r3
 800048e:	4623      	mov	r3, r4
 8000490:	80fb      	strh	r3, [r7, #6]
 8000492:	4603      	mov	r3, r0
 8000494:	80bb      	strh	r3, [r7, #4]
 8000496:	460b      	mov	r3, r1
 8000498:	807b      	strh	r3, [r7, #2]
 800049a:	4613      	mov	r3, r2
 800049c:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 800049e:	88fb      	ldrh	r3, [r7, #6]
 80004a0:	0a1b      	lsrs	r3, r3, #8
 80004a2:	b29b      	uxth	r3, r3
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 80004a8:	88fb      	ldrh	r3, [r7, #6]
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 80004ae:	887b      	ldrh	r3, [r7, #2]
 80004b0:	0a1b      	lsrs	r3, r3, #8
 80004b2:	b29b      	uxth	r3, r3
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 80004b8:	887b      	ldrh	r3, [r7, #2]
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 80004be:	202a      	movs	r0, #42	@ 0x2a
 80004c0:	f7ff ff8e 	bl	80003e0 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80004c4:	f107 030c 	add.w	r3, r7, #12
 80004c8:	2104      	movs	r1, #4
 80004ca:	4618      	mov	r0, r3
 80004cc:	f7ff ffbc 	bl	8000448 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 80004d0:	88bb      	ldrh	r3, [r7, #4]
 80004d2:	0a1b      	lsrs	r3, r3, #8
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 80004da:	88bb      	ldrh	r3, [r7, #4]
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 80004e0:	883b      	ldrh	r3, [r7, #0]
 80004e2:	0a1b      	lsrs	r3, r3, #8
 80004e4:	b29b      	uxth	r3, r3
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 80004ea:	883b      	ldrh	r3, [r7, #0]
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 80004f0:	202b      	movs	r0, #43	@ 0x2b
 80004f2:	f7ff ff75 	bl	80003e0 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80004f6:	f107 030c 	add.w	r3, r7, #12
 80004fa:	2104      	movs	r1, #4
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff ffa3 	bl	8000448 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 8000502:	202c      	movs	r0, #44	@ 0x2c
 8000504:	f7ff ff6c 	bl	80003e0 <ILI9341_WriteCommand>
}
 8000508:	bf00      	nop
 800050a:	3714      	adds	r7, #20
 800050c:	46bd      	mov	sp, r7
 800050e:	bd90      	pop	{r4, r7, pc}

08000510 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8000514:	2200      	movs	r2, #0
 8000516:	2104      	movs	r1, #4
 8000518:	480c      	ldr	r0, [pc, #48]	@ (800054c <ILI9341_Reset+0x3c>)
 800051a:	f001 fc01 	bl	8001d20 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800051e:	200a      	movs	r0, #10
 8000520:	f000 ff84 	bl	800142c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8000524:	2200      	movs	r2, #0
 8000526:	2102      	movs	r1, #2
 8000528:	4808      	ldr	r0, [pc, #32]	@ (800054c <ILI9341_Reset+0x3c>)
 800052a:	f001 fbf9 	bl	8001d20 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800052e:	200a      	movs	r0, #10
 8000530:	f000 ff7c 	bl	800142c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000534:	2201      	movs	r2, #1
 8000536:	2104      	movs	r1, #4
 8000538:	4804      	ldr	r0, [pc, #16]	@ (800054c <ILI9341_Reset+0x3c>)
 800053a:	f001 fbf1 	bl	8001d20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 800053e:	2201      	movs	r2, #1
 8000540:	2102      	movs	r1, #2
 8000542:	4802      	ldr	r0, [pc, #8]	@ (800054c <ILI9341_Reset+0x3c>)
 8000544:	f001 fbec 	bl	8001d20 <HAL_GPIO_WritePin>
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}
 800054c:	48000800 	.word	0x48000800

08000550 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000554:	2201      	movs	r2, #1
 8000556:	2104      	movs	r1, #4
 8000558:	4802      	ldr	r0, [pc, #8]	@ (8000564 <ILI9341_Enable+0x14>)
 800055a:	f001 fbe1 	bl	8001d20 <HAL_GPIO_WritePin>
}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	48000800 	.word	0x48000800

08000568 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 800056c:	f7ff fff0 	bl	8000550 <ILI9341_Enable>
	ILI9341_Reset();
 8000570:	f7ff ffce 	bl	8000510 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8000574:	2001      	movs	r0, #1
 8000576:	f7ff ff33 	bl	80003e0 <ILI9341_WriteCommand>
	HAL_Delay(10);
 800057a:	200a      	movs	r0, #10
 800057c:	f000 ff56 	bl	800142c <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8000580:	20cb      	movs	r0, #203	@ 0xcb
 8000582:	f7ff ff2d 	bl	80003e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8000586:	2039      	movs	r0, #57	@ 0x39
 8000588:	f7ff ff44 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 800058c:	202c      	movs	r0, #44	@ 0x2c
 800058e:	f7ff ff41 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000592:	2000      	movs	r0, #0
 8000594:	f7ff ff3e 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8000598:	2034      	movs	r0, #52	@ 0x34
 800059a:	f7ff ff3b 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 800059e:	2002      	movs	r0, #2
 80005a0:	f7ff ff38 	bl	8000414 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 80005a4:	20cf      	movs	r0, #207	@ 0xcf
 80005a6:	f7ff ff1b 	bl	80003e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80005aa:	2000      	movs	r0, #0
 80005ac:	f7ff ff32 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80005b0:	20c1      	movs	r0, #193	@ 0xc1
 80005b2:	f7ff ff2f 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 80005b6:	2030      	movs	r0, #48	@ 0x30
 80005b8:	f7ff ff2c 	bl	8000414 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 80005bc:	20e8      	movs	r0, #232	@ 0xe8
 80005be:	f7ff ff0f 	bl	80003e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 80005c2:	2085      	movs	r0, #133	@ 0x85
 80005c4:	f7ff ff26 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80005c8:	2000      	movs	r0, #0
 80005ca:	f7ff ff23 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 80005ce:	2078      	movs	r0, #120	@ 0x78
 80005d0:	f7ff ff20 	bl	8000414 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 80005d4:	20ea      	movs	r0, #234	@ 0xea
 80005d6:	f7ff ff03 	bl	80003e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80005da:	2000      	movs	r0, #0
 80005dc:	f7ff ff1a 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80005e0:	2000      	movs	r0, #0
 80005e2:	f7ff ff17 	bl	8000414 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 80005e6:	20ed      	movs	r0, #237	@ 0xed
 80005e8:	f7ff fefa 	bl	80003e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 80005ec:	2064      	movs	r0, #100	@ 0x64
 80005ee:	f7ff ff11 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80005f2:	2003      	movs	r0, #3
 80005f4:	f7ff ff0e 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 80005f8:	2012      	movs	r0, #18
 80005fa:	f7ff ff0b 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 80005fe:	2081      	movs	r0, #129	@ 0x81
 8000600:	f7ff ff08 	bl	8000414 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000604:	20f7      	movs	r0, #247	@ 0xf7
 8000606:	f7ff feeb 	bl	80003e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 800060a:	2020      	movs	r0, #32
 800060c:	f7ff ff02 	bl	8000414 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000610:	20c0      	movs	r0, #192	@ 0xc0
 8000612:	f7ff fee5 	bl	80003e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8000616:	2023      	movs	r0, #35	@ 0x23
 8000618:	f7ff fefc 	bl	8000414 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 800061c:	20c1      	movs	r0, #193	@ 0xc1
 800061e:	f7ff fedf 	bl	80003e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8000622:	2010      	movs	r0, #16
 8000624:	f7ff fef6 	bl	8000414 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8000628:	20c5      	movs	r0, #197	@ 0xc5
 800062a:	f7ff fed9 	bl	80003e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 800062e:	203e      	movs	r0, #62	@ 0x3e
 8000630:	f7ff fef0 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8000634:	2028      	movs	r0, #40	@ 0x28
 8000636:	f7ff feed 	bl	8000414 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 800063a:	20c7      	movs	r0, #199	@ 0xc7
 800063c:	f7ff fed0 	bl	80003e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8000640:	2086      	movs	r0, #134	@ 0x86
 8000642:	f7ff fee7 	bl	8000414 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8000646:	2036      	movs	r0, #54	@ 0x36
 8000648:	f7ff feca 	bl	80003e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 800064c:	2048      	movs	r0, #72	@ 0x48
 800064e:	f7ff fee1 	bl	8000414 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8000652:	203a      	movs	r0, #58	@ 0x3a
 8000654:	f7ff fec4 	bl	80003e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8000658:	2055      	movs	r0, #85	@ 0x55
 800065a:	f7ff fedb 	bl	8000414 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 800065e:	20b1      	movs	r0, #177	@ 0xb1
 8000660:	f7ff febe 	bl	80003e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000664:	2000      	movs	r0, #0
 8000666:	f7ff fed5 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 800066a:	2018      	movs	r0, #24
 800066c:	f7ff fed2 	bl	8000414 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000670:	20b6      	movs	r0, #182	@ 0xb6
 8000672:	f7ff feb5 	bl	80003e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8000676:	2008      	movs	r0, #8
 8000678:	f7ff fecc 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 800067c:	2082      	movs	r0, #130	@ 0x82
 800067e:	f7ff fec9 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8000682:	2027      	movs	r0, #39	@ 0x27
 8000684:	f7ff fec6 	bl	8000414 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8000688:	20f2      	movs	r0, #242	@ 0xf2
 800068a:	f7ff fea9 	bl	80003e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800068e:	2000      	movs	r0, #0
 8000690:	f7ff fec0 	bl	8000414 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000694:	2026      	movs	r0, #38	@ 0x26
 8000696:	f7ff fea3 	bl	80003e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 800069a:	2001      	movs	r0, #1
 800069c:	f7ff feba 	bl	8000414 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 80006a0:	20e0      	movs	r0, #224	@ 0xe0
 80006a2:	f7ff fe9d 	bl	80003e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 80006a6:	200f      	movs	r0, #15
 80006a8:	f7ff feb4 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80006ac:	2031      	movs	r0, #49	@ 0x31
 80006ae:	f7ff feb1 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 80006b2:	202b      	movs	r0, #43	@ 0x2b
 80006b4:	f7ff feae 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 80006b8:	200c      	movs	r0, #12
 80006ba:	f7ff feab 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80006be:	200e      	movs	r0, #14
 80006c0:	f7ff fea8 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 80006c4:	2008      	movs	r0, #8
 80006c6:	f7ff fea5 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 80006ca:	204e      	movs	r0, #78	@ 0x4e
 80006cc:	f7ff fea2 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 80006d0:	20f1      	movs	r0, #241	@ 0xf1
 80006d2:	f7ff fe9f 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 80006d6:	2037      	movs	r0, #55	@ 0x37
 80006d8:	f7ff fe9c 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 80006dc:	2007      	movs	r0, #7
 80006de:	f7ff fe99 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 80006e2:	2010      	movs	r0, #16
 80006e4:	f7ff fe96 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80006e8:	2003      	movs	r0, #3
 80006ea:	f7ff fe93 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80006ee:	200e      	movs	r0, #14
 80006f0:	f7ff fe90 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 80006f4:	2009      	movs	r0, #9
 80006f6:	f7ff fe8d 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80006fa:	2000      	movs	r0, #0
 80006fc:	f7ff fe8a 	bl	8000414 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8000700:	20e1      	movs	r0, #225	@ 0xe1
 8000702:	f7ff fe6d 	bl	80003e0 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000706:	2000      	movs	r0, #0
 8000708:	f7ff fe84 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 800070c:	200e      	movs	r0, #14
 800070e:	f7ff fe81 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8000712:	2014      	movs	r0, #20
 8000714:	f7ff fe7e 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000718:	2003      	movs	r0, #3
 800071a:	f7ff fe7b 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 800071e:	2011      	movs	r0, #17
 8000720:	f7ff fe78 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000724:	2007      	movs	r0, #7
 8000726:	f7ff fe75 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 800072a:	2031      	movs	r0, #49	@ 0x31
 800072c:	f7ff fe72 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000730:	20c1      	movs	r0, #193	@ 0xc1
 8000732:	f7ff fe6f 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8000736:	2048      	movs	r0, #72	@ 0x48
 8000738:	f7ff fe6c 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 800073c:	2008      	movs	r0, #8
 800073e:	f7ff fe69 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000742:	200f      	movs	r0, #15
 8000744:	f7ff fe66 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000748:	200c      	movs	r0, #12
 800074a:	f7ff fe63 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 800074e:	2031      	movs	r0, #49	@ 0x31
 8000750:	f7ff fe60 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8000754:	2036      	movs	r0, #54	@ 0x36
 8000756:	f7ff fe5d 	bl	8000414 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 800075a:	200f      	movs	r0, #15
 800075c:	f7ff fe5a 	bl	8000414 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8000760:	2011      	movs	r0, #17
 8000762:	f7ff fe3d 	bl	80003e0 <ILI9341_WriteCommand>
	HAL_Delay(100);
 8000766:	2064      	movs	r0, #100	@ 0x64
 8000768:	f000 fe60 	bl	800142c <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 800076c:	2029      	movs	r0, #41	@ 0x29
 800076e:	f7ff fe37 	bl	80003e0 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8000772:	2000      	movs	r0, #0
 8000774:	f000 f802 	bl	800077c <ILI9341_SetRotation>
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}

0800077c <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8000786:	2036      	movs	r0, #54	@ 0x36
 8000788:	f7ff fe2a 	bl	80003e0 <ILI9341_WriteCommand>
	HAL_Delay(1);
 800078c:	2001      	movs	r0, #1
 800078e:	f000 fe4d 	bl	800142c <HAL_Delay>

	switch(rotation)
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2b03      	cmp	r3, #3
 8000796:	d837      	bhi.n	8000808 <ILI9341_SetRotation+0x8c>
 8000798:	a201      	add	r2, pc, #4	@ (adr r2, 80007a0 <ILI9341_SetRotation+0x24>)
 800079a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079e:	bf00      	nop
 80007a0:	080007b1 	.word	0x080007b1
 80007a4:	080007c7 	.word	0x080007c7
 80007a8:	080007dd 	.word	0x080007dd
 80007ac:	080007f3 	.word	0x080007f3
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 80007b0:	2048      	movs	r0, #72	@ 0x48
 80007b2:	f7ff fe2f 	bl	8000414 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 80007b6:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <ILI9341_SetRotation+0x98>)
 80007b8:	22f0      	movs	r2, #240	@ 0xf0
 80007ba:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80007bc:	4b16      	ldr	r3, [pc, #88]	@ (8000818 <ILI9341_SetRotation+0x9c>)
 80007be:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80007c2:	801a      	strh	r2, [r3, #0]
		break;
 80007c4:	e021      	b.n	800080a <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 80007c6:	2028      	movs	r0, #40	@ 0x28
 80007c8:	f7ff fe24 	bl	8000414 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80007cc:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <ILI9341_SetRotation+0x98>)
 80007ce:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80007d2:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80007d4:	4b10      	ldr	r3, [pc, #64]	@ (8000818 <ILI9341_SetRotation+0x9c>)
 80007d6:	22f0      	movs	r2, #240	@ 0xf0
 80007d8:	801a      	strh	r2, [r3, #0]
		break;
 80007da:	e016      	b.n	800080a <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 80007dc:	2088      	movs	r0, #136	@ 0x88
 80007de:	f7ff fe19 	bl	8000414 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 80007e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <ILI9341_SetRotation+0x98>)
 80007e4:	22f0      	movs	r2, #240	@ 0xf0
 80007e6:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80007e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000818 <ILI9341_SetRotation+0x9c>)
 80007ea:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80007ee:	801a      	strh	r2, [r3, #0]
		break;
 80007f0:	e00b      	b.n	800080a <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 80007f2:	20e8      	movs	r0, #232	@ 0xe8
 80007f4:	f7ff fe0e 	bl	8000414 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <ILI9341_SetRotation+0x98>)
 80007fa:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80007fe:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000800:	4b05      	ldr	r3, [pc, #20]	@ (8000818 <ILI9341_SetRotation+0x9c>)
 8000802:	22f0      	movs	r2, #240	@ 0xf0
 8000804:	801a      	strh	r2, [r3, #0]
		break;
 8000806:	e000      	b.n	800080a <ILI9341_SetRotation+0x8e>
	default:
		break;
 8000808:	bf00      	nop
	}
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000002 	.word	0x20000002
 8000818:	20000000 	.word	0x20000000

0800081c <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 800081c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000820:	b08d      	sub	sp, #52	@ 0x34
 8000822:	af00      	add	r7, sp, #0
 8000824:	4603      	mov	r3, r0
 8000826:	6039      	str	r1, [r7, #0]
 8000828:	80fb      	strh	r3, [r7, #6]
 800082a:	466b      	mov	r3, sp
 800082c:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if((size*2) < BURST_MAX_SIZE)
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800083a:	d202      	bcs.n	8000842 <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000840:	e002      	b.n	8000848 <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8000842:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000846:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000848:	2201      	movs	r2, #1
 800084a:	2108      	movs	r1, #8
 800084c:	483e      	ldr	r0, [pc, #248]	@ (8000948 <ILI9341_DrawColorBurst+0x12c>)
 800084e:	f001 fa67 	bl	8001d20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2102      	movs	r1, #2
 8000856:	483c      	ldr	r0, [pc, #240]	@ (8000948 <ILI9341_DrawColorBurst+0x12c>)
 8000858:	f001 fa62 	bl	8001d20 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 800085c:	88fb      	ldrh	r3, [r7, #6]
 800085e:	0a1b      	lsrs	r3, r3, #8
 8000860:	b29b      	uxth	r3, r3
 8000862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t BurstBuffer[BufferSize];
 8000866:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000868:	460b      	mov	r3, r1
 800086a:	3b01      	subs	r3, #1
 800086c:	61fb      	str	r3, [r7, #28]
 800086e:	2300      	movs	r3, #0
 8000870:	4688      	mov	r8, r1
 8000872:	4699      	mov	r9, r3
 8000874:	f04f 0200 	mov.w	r2, #0
 8000878:	f04f 0300 	mov.w	r3, #0
 800087c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000880:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000884:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000888:	2300      	movs	r3, #0
 800088a:	460c      	mov	r4, r1
 800088c:	461d      	mov	r5, r3
 800088e:	f04f 0200 	mov.w	r2, #0
 8000892:	f04f 0300 	mov.w	r3, #0
 8000896:	00eb      	lsls	r3, r5, #3
 8000898:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800089c:	00e2      	lsls	r2, r4, #3
 800089e:	1dcb      	adds	r3, r1, #7
 80008a0:	08db      	lsrs	r3, r3, #3
 80008a2:	00db      	lsls	r3, r3, #3
 80008a4:	ebad 0d03 	sub.w	sp, sp, r3
 80008a8:	466b      	mov	r3, sp
 80008aa:	3300      	adds	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 80008ae:	2300      	movs	r3, #0
 80008b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80008b2:	e00e      	b.n	80008d2 <ILI9341_DrawColorBurst+0xb6>
	{
		BurstBuffer[j] = chifted;
 80008b4:	69ba      	ldr	r2, [r7, #24]
 80008b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008b8:	4413      	add	r3, r2
 80008ba:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80008be:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 80008c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008c2:	3301      	adds	r3, #1
 80008c4:	88fa      	ldrh	r2, [r7, #6]
 80008c6:	b2d1      	uxtb	r1, r2
 80008c8:	69ba      	ldr	r2, [r7, #24]
 80008ca:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 80008cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008ce:	3302      	adds	r3, #2
 80008d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80008d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80008d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d3ec      	bcc.n	80008b4 <ILI9341_DrawColorBurst+0x98>
	}

	uint32_t SendingSize = size * 2;
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 80008e0:	697a      	ldr	r2, [r7, #20]
 80008e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e8:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80008ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80008f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80008f4:	fb01 f202 	mul.w	r2, r1, r2
 80008f8:	1a9b      	subs	r3, r3, r2
 80008fa:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d010      	beq.n	8000924 <ILI9341_DrawColorBurst+0x108>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	@ 0x24
 8000906:	e009      	b.n	800091c <ILI9341_DrawColorBurst+0x100>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8000908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800090a:	b29a      	uxth	r2, r3
 800090c:	230a      	movs	r3, #10
 800090e:	69b9      	ldr	r1, [r7, #24]
 8000910:	480e      	ldr	r0, [pc, #56]	@ (800094c <ILI9341_DrawColorBurst+0x130>)
 8000912:	f003 f890 	bl	8003a36 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000918:	3301      	adds	r3, #1
 800091a:	627b      	str	r3, [r7, #36]	@ 0x24
 800091c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800091e:	693b      	ldr	r3, [r7, #16]
 8000920:	429a      	cmp	r2, r3
 8000922:	d3f1      	bcc.n	8000908 <ILI9341_DrawColorBurst+0xec>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	b29a      	uxth	r2, r3
 8000928:	230a      	movs	r3, #10
 800092a:	69b9      	ldr	r1, [r7, #24]
 800092c:	4807      	ldr	r0, [pc, #28]	@ (800094c <ILI9341_DrawColorBurst+0x130>)
 800092e:	f003 f882 	bl	8003a36 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000932:	2201      	movs	r2, #1
 8000934:	2102      	movs	r1, #2
 8000936:	4804      	ldr	r0, [pc, #16]	@ (8000948 <ILI9341_DrawColorBurst+0x12c>)
 8000938:	f001 f9f2 	bl	8001d20 <HAL_GPIO_WritePin>
 800093c:	46b5      	mov	sp, r6
}
 800093e:	bf00      	nop
 8000940:	3734      	adds	r7, #52	@ 0x34
 8000942:	46bd      	mov	sp, r7
 8000944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000948:	48000800 	.word	0x48000800
 800094c:	20000080 	.word	0x20000080

08000950 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 800095a:	4b0e      	ldr	r3, [pc, #56]	@ (8000994 <ILI9341_FillScreen+0x44>)
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	b29a      	uxth	r2, r3
 8000960:	4b0d      	ldr	r3, [pc, #52]	@ (8000998 <ILI9341_FillScreen+0x48>)
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	b29b      	uxth	r3, r3
 8000966:	2100      	movs	r1, #0
 8000968:	2000      	movs	r0, #0
 800096a:	f7ff fd89 	bl	8000480 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 800096e:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <ILI9341_FillScreen+0x44>)
 8000970:	881b      	ldrh	r3, [r3, #0]
 8000972:	b29b      	uxth	r3, r3
 8000974:	461a      	mov	r2, r3
 8000976:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <ILI9341_FillScreen+0x48>)
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	b29b      	uxth	r3, r3
 800097c:	fb02 f303 	mul.w	r3, r2, r3
 8000980:	461a      	mov	r2, r3
 8000982:	88fb      	ldrh	r3, [r7, #6]
 8000984:	4611      	mov	r1, r2
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff ff48 	bl	800081c <ILI9341_DrawColorBurst>
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000002 	.word	0x20000002
 8000998:	20000000 	.word	0x20000000

0800099c <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	80fb      	strh	r3, [r7, #6]
 80009a6:	460b      	mov	r3, r1
 80009a8:	80bb      	strh	r3, [r7, #4]
 80009aa:	4613      	mov	r3, r2
 80009ac:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80009ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000a60 <ILI9341_DrawPixel+0xc4>)
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	88fa      	ldrh	r2, [r7, #6]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d24d      	bcs.n	8000a56 <ILI9341_DrawPixel+0xba>
 80009ba:	4b2a      	ldr	r3, [pc, #168]	@ (8000a64 <ILI9341_DrawPixel+0xc8>)
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	b29b      	uxth	r3, r3
 80009c0:	88ba      	ldrh	r2, [r7, #4]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d247      	bcs.n	8000a56 <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 80009c6:	88fb      	ldrh	r3, [r7, #6]
 80009c8:	0a1b      	lsrs	r3, r3, #8
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	753b      	strb	r3, [r7, #20]
 80009d0:	88fb      	ldrh	r3, [r7, #6]
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	757b      	strb	r3, [r7, #21]
 80009d6:	88fb      	ldrh	r3, [r7, #6]
 80009d8:	3301      	adds	r3, #1
 80009da:	121b      	asrs	r3, r3, #8
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	75bb      	strb	r3, [r7, #22]
 80009e0:	88fb      	ldrh	r3, [r7, #6]
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	3301      	adds	r3, #1
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 80009ea:	88bb      	ldrh	r3, [r7, #4]
 80009ec:	0a1b      	lsrs	r3, r3, #8
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	743b      	strb	r3, [r7, #16]
 80009f4:	88bb      	ldrh	r3, [r7, #4]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	747b      	strb	r3, [r7, #17]
 80009fa:	88bb      	ldrh	r3, [r7, #4]
 80009fc:	3301      	adds	r3, #1
 80009fe:	121b      	asrs	r3, r3, #8
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	74bb      	strb	r3, [r7, #18]
 8000a04:	88bb      	ldrh	r3, [r7, #4]
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	3301      	adds	r3, #1
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8000a0e:	887b      	ldrh	r3, [r7, #2]
 8000a10:	0a1b      	lsrs	r3, r3, #8
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	733b      	strb	r3, [r7, #12]
 8000a18:	887b      	ldrh	r3, [r7, #2]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8000a1e:	202a      	movs	r0, #42	@ 0x2a
 8000a20:	f7ff fcde 	bl	80003e0 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	2104      	movs	r1, #4
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fd0c 	bl	8000448 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8000a30:	202b      	movs	r0, #43	@ 0x2b
 8000a32:	f7ff fcd5 	bl	80003e0 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8000a36:	f107 0310 	add.w	r3, r7, #16
 8000a3a:	2104      	movs	r1, #4
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fd03 	bl	8000448 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8000a42:	202c      	movs	r0, #44	@ 0x2c
 8000a44:	f7ff fccc 	bl	80003e0 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8000a48:	f107 030c 	add.w	r3, r7, #12
 8000a4c:	2102      	movs	r1, #2
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fcfa 	bl	8000448 <ILI9341_WriteBuffer>
 8000a54:	e000      	b.n	8000a58 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000a56:	bf00      	nop
}
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000002 	.word	0x20000002
 8000a64:	20000000 	.word	0x20000000

08000a68 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8000a68:	b590      	push	{r4, r7, lr}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4604      	mov	r4, r0
 8000a70:	4608      	mov	r0, r1
 8000a72:	4611      	mov	r1, r2
 8000a74:	461a      	mov	r2, r3
 8000a76:	4623      	mov	r3, r4
 8000a78:	80fb      	strh	r3, [r7, #6]
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	80bb      	strh	r3, [r7, #4]
 8000a7e:	460b      	mov	r3, r1
 8000a80:	807b      	strh	r3, [r7, #2]
 8000a82:	4613      	mov	r3, r2
 8000a84:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000a86:	4b24      	ldr	r3, [pc, #144]	@ (8000b18 <ILI9341_DrawRectangle+0xb0>)
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	88fa      	ldrh	r2, [r7, #6]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d23d      	bcs.n	8000b0e <ILI9341_DrawRectangle+0xa6>
 8000a92:	4b22      	ldr	r3, [pc, #136]	@ (8000b1c <ILI9341_DrawRectangle+0xb4>)
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	88ba      	ldrh	r2, [r7, #4]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d237      	bcs.n	8000b0e <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8000a9e:	88fa      	ldrh	r2, [r7, #6]
 8000aa0:	887b      	ldrh	r3, [r7, #2]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4a1c      	ldr	r2, [pc, #112]	@ (8000b18 <ILI9341_DrawRectangle+0xb0>)
 8000aa6:	8812      	ldrh	r2, [r2, #0]
 8000aa8:	b292      	uxth	r2, r2
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	dd05      	ble.n	8000aba <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8000aae:	4b1a      	ldr	r3, [pc, #104]	@ (8000b18 <ILI9341_DrawRectangle+0xb0>)
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	88fb      	ldrh	r3, [r7, #6]
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8000aba:	88ba      	ldrh	r2, [r7, #4]
 8000abc:	883b      	ldrh	r3, [r7, #0]
 8000abe:	4413      	add	r3, r2
 8000ac0:	4a16      	ldr	r2, [pc, #88]	@ (8000b1c <ILI9341_DrawRectangle+0xb4>)
 8000ac2:	8812      	ldrh	r2, [r2, #0]
 8000ac4:	b292      	uxth	r2, r2
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	dd05      	ble.n	8000ad6 <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8000aca:	4b14      	ldr	r3, [pc, #80]	@ (8000b1c <ILI9341_DrawRectangle+0xb4>)
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	88bb      	ldrh	r3, [r7, #4]
 8000ad2:	1ad3      	subs	r3, r2, r3
 8000ad4:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8000ad6:	88fa      	ldrh	r2, [r7, #6]
 8000ad8:	887b      	ldrh	r3, [r7, #2]
 8000ada:	4413      	add	r3, r2
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	b29c      	uxth	r4, r3
 8000ae2:	88ba      	ldrh	r2, [r7, #4]
 8000ae4:	883b      	ldrh	r3, [r7, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	3b01      	subs	r3, #1
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	88b9      	ldrh	r1, [r7, #4]
 8000af0:	88f8      	ldrh	r0, [r7, #6]
 8000af2:	4622      	mov	r2, r4
 8000af4:	f7ff fcc4 	bl	8000480 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8000af8:	883b      	ldrh	r3, [r7, #0]
 8000afa:	887a      	ldrh	r2, [r7, #2]
 8000afc:	fb02 f303 	mul.w	r3, r2, r3
 8000b00:	461a      	mov	r2, r3
 8000b02:	8b3b      	ldrh	r3, [r7, #24]
 8000b04:	4611      	mov	r1, r2
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fe88 	bl	800081c <ILI9341_DrawColorBurst>
 8000b0c:	e000      	b.n	8000b10 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000b0e:	bf00      	nop
}
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd90      	pop	{r4, r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000002 	.word	0x20000002
 8000b1c:	20000000 	.word	0x20000000

08000b20 <TP_Touchpad_Pressed>:
        return TOUCHPAD_DATA_NOISY;
    }
}

// Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0) {
 8000b24:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b28:	4805      	ldr	r0, [pc, #20]	@ (8000b40 <TP_Touchpad_Pressed+0x20>)
 8000b2a:	f001 f8e1 	bl	8001cf0 <HAL_GPIO_ReadPin>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d101      	bne.n	8000b38 <TP_Touchpad_Pressed+0x18>
        return TOUCHPAD_PRESSED;
 8000b34:	2301      	movs	r3, #1
 8000b36:	e000      	b.n	8000b3a <TP_Touchpad_Pressed+0x1a>
    } else {
        return TOUCHPAD_NOT_PRESSED;
 8000b38:	2300      	movs	r3, #0
    }
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	48000800 	.word	0x48000800

08000b44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4a:	f000 fc09 	bl	8001360 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b4e:	f000 f83d 	bl	8000bcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b52:	f000 f98b 	bl	8000e6c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b56:	f000 f96b 	bl	8000e30 <MX_DMA_Init>
  MX_I2C1_Init();
 8000b5a:	f000 f899 	bl	8000c90 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000b5e:	f000 f8d7 	bl	8000d10 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000b62:	f000 f943 	bl	8000dec <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 8000b66:	f000 f911 	bl	8000d8c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 8000b6a:	f7ff fcfd 	bl	8000568 <ILI9341_Init>


  ILI9341_FillScreen(WHITE);
 8000b6e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000b72:	f7ff feed 	bl	8000950 <ILI9341_FillScreen>
  ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 8000b76:	2003      	movs	r0, #3
 8000b78:	f7ff fe00 	bl	800077c <ILI9341_SetRotation>
  ILI9341_DrawText("HELLO WORLD", FONT4, 90, 110, BLACK, WHITE);
 8000b7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b80:	9301      	str	r3, [sp, #4]
 8000b82:	2300      	movs	r3, #0
 8000b84:	9300      	str	r3, [sp, #0]
 8000b86:	236e      	movs	r3, #110	@ 0x6e
 8000b88:	225a      	movs	r2, #90	@ 0x5a
 8000b8a:	490d      	ldr	r1, [pc, #52]	@ (8000bc0 <main+0x7c>)
 8000b8c:	480d      	ldr	r0, [pc, #52]	@ (8000bc4 <main+0x80>)
 8000b8e:	f7ff fb93 	bl	80002b8 <ILI9341_DrawText>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (TP_Touchpad_Pressed()) {
 8000b92:	f7ff ffc5 	bl	8000b20 <TP_Touchpad_Pressed>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d00a      	beq.n	8000bb2 <main+0x6e>
		  //turn led on
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ba2:	4809      	ldr	r0, [pc, #36]	@ (8000bc8 <main+0x84>)
 8000ba4:	f001 f8bc 	bl	8001d20 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 8000ba8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bac:	f000 fc3e 	bl	800142c <HAL_Delay>
 8000bb0:	e7ef      	b.n	8000b92 <main+0x4e>
	  } else {
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bb8:	4803      	ldr	r0, [pc, #12]	@ (8000bc8 <main+0x84>)
 8000bba:	f001 f8b1 	bl	8001d20 <HAL_GPIO_WritePin>
	  if (TP_Touchpad_Pressed()) {
 8000bbe:	e7e8      	b.n	8000b92 <main+0x4e>
 8000bc0:	08004c5c 	.word	0x08004c5c
 8000bc4:	08004c50 	.word	0x08004c50
 8000bc8:	48001000 	.word	0x48001000

08000bcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b09e      	sub	sp, #120	@ 0x78
 8000bd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000bd6:	2228      	movs	r2, #40	@ 0x28
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f004 f800 	bl	8004be0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	223c      	movs	r2, #60	@ 0x3c
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f003 fff2 	bl	8004be0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c00:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c04:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c0e:	2310      	movs	r3, #16
 8000c10:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c12:	2302      	movs	r3, #2
 8000c14:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c16:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c1a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c1c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000c20:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c22:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000c26:	4618      	mov	r0, r3
 8000c28:	f001 fa8c 	bl	8002144 <HAL_RCC_OscConfig>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000c32:	f000 f9bd 	bl	8000fb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c36:	230f      	movs	r3, #15
 8000c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c46:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c4c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000c50:	2102      	movs	r1, #2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f002 fa84 	bl	8003160 <HAL_RCC_ClockConfig>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c5e:	f000 f9a7 	bl	8000fb0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8000c62:	4b0a      	ldr	r3, [pc, #40]	@ (8000c8c <SystemClock_Config+0xc0>)
 8000c64:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c72:	463b      	mov	r3, r7
 8000c74:	4618      	mov	r0, r3
 8000c76:	f002 fc85 	bl	8003584 <HAL_RCCEx_PeriphCLKConfig>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000c80:	f000 f996 	bl	8000fb0 <Error_Handler>
  }
}
 8000c84:	bf00      	nop
 8000c86:	3778      	adds	r7, #120	@ 0x78
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	00020021 	.word	0x00020021

08000c90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c94:	4b1b      	ldr	r3, [pc, #108]	@ (8000d04 <MX_I2C1_Init+0x74>)
 8000c96:	4a1c      	ldr	r2, [pc, #112]	@ (8000d08 <MX_I2C1_Init+0x78>)
 8000c98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d04 <MX_I2C1_Init+0x74>)
 8000c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8000d0c <MX_I2C1_Init+0x7c>)
 8000c9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ca0:	4b18      	ldr	r3, [pc, #96]	@ (8000d04 <MX_I2C1_Init+0x74>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ca6:	4b17      	ldr	r3, [pc, #92]	@ (8000d04 <MX_I2C1_Init+0x74>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cac:	4b15      	ldr	r3, [pc, #84]	@ (8000d04 <MX_I2C1_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cb2:	4b14      	ldr	r3, [pc, #80]	@ (8000d04 <MX_I2C1_Init+0x74>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cb8:	4b12      	ldr	r3, [pc, #72]	@ (8000d04 <MX_I2C1_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cbe:	4b11      	ldr	r3, [pc, #68]	@ (8000d04 <MX_I2C1_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d04 <MX_I2C1_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cca:	480e      	ldr	r0, [pc, #56]	@ (8000d04 <MX_I2C1_Init+0x74>)
 8000ccc:	f001 f840 	bl	8001d50 <HAL_I2C_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cd6:	f000 f96b 	bl	8000fb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4809      	ldr	r0, [pc, #36]	@ (8000d04 <MX_I2C1_Init+0x74>)
 8000cde:	f001 f8d2 	bl	8001e86 <HAL_I2CEx_ConfigAnalogFilter>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ce8:	f000 f962 	bl	8000fb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cec:	2100      	movs	r1, #0
 8000cee:	4805      	ldr	r0, [pc, #20]	@ (8000d04 <MX_I2C1_Init+0x74>)
 8000cf0:	f001 f914 	bl	8001f1c <HAL_I2CEx_ConfigDigitalFilter>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cfa:	f000 f959 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	2000002c 	.word	0x2000002c
 8000d08:	40005400 	.word	0x40005400
 8000d0c:	00201d2b 	.word	0x00201d2b

08000d10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d14:	4b1b      	ldr	r3, [pc, #108]	@ (8000d84 <MX_SPI1_Init+0x74>)
 8000d16:	4a1c      	ldr	r2, [pc, #112]	@ (8000d88 <MX_SPI1_Init+0x78>)
 8000d18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d84 <MX_SPI1_Init+0x74>)
 8000d1c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d22:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <MX_SPI1_Init+0x74>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d28:	4b16      	ldr	r3, [pc, #88]	@ (8000d84 <MX_SPI1_Init+0x74>)
 8000d2a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000d2e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d30:	4b14      	ldr	r3, [pc, #80]	@ (8000d84 <MX_SPI1_Init+0x74>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d36:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <MX_SPI1_Init+0x74>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <MX_SPI1_Init+0x74>)
 8000d3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d42:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	@ (8000d84 <MX_SPI1_Init+0x74>)
 8000d46:	2208      	movs	r2, #8
 8000d48:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <MX_SPI1_Init+0x74>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <MX_SPI1_Init+0x74>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	@ (8000d84 <MX_SPI1_Init+0x74>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	@ (8000d84 <MX_SPI1_Init+0x74>)
 8000d5e:	2207      	movs	r2, #7
 8000d60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d62:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <MX_SPI1_Init+0x74>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <MX_SPI1_Init+0x74>)
 8000d6a:	2208      	movs	r2, #8
 8000d6c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d6e:	4805      	ldr	r0, [pc, #20]	@ (8000d84 <MX_SPI1_Init+0x74>)
 8000d70:	f002 fdb6 	bl	80038e0 <HAL_SPI_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d7a:	f000 f919 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000080 	.word	0x20000080
 8000d88:	40013000 	.word	0x40013000

08000d8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d90:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <MX_USART1_UART_Init+0x58>)
 8000d92:	4a15      	ldr	r2, [pc, #84]	@ (8000de8 <MX_USART1_UART_Init+0x5c>)
 8000d94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000d96:	4b13      	ldr	r3, [pc, #76]	@ (8000de4 <MX_USART1_UART_Init+0x58>)
 8000d98:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000d9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <MX_USART1_UART_Init+0x58>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <MX_USART1_UART_Init+0x58>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	@ (8000de4 <MX_USART1_UART_Init+0x58>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <MX_USART1_UART_Init+0x58>)
 8000db2:	220c      	movs	r2, #12
 8000db4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	@ (8000de4 <MX_USART1_UART_Init+0x58>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <MX_USART1_UART_Init+0x58>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dc2:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <MX_USART1_UART_Init+0x58>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <MX_USART1_UART_Init+0x58>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dce:	4805      	ldr	r0, [pc, #20]	@ (8000de4 <MX_USART1_UART_Init+0x58>)
 8000dd0:	f003 fa90 	bl	80042f4 <HAL_UART_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000dda:	f000 f8e9 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000128 	.word	0x20000128
 8000de8:	40013800 	.word	0x40013800

08000dec <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000df0:	4b0d      	ldr	r3, [pc, #52]	@ (8000e28 <MX_USB_PCD_Init+0x3c>)
 8000df2:	4a0e      	ldr	r2, [pc, #56]	@ (8000e2c <MX_USB_PCD_Init+0x40>)
 8000df4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000df6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e28 <MX_USB_PCD_Init+0x3c>)
 8000df8:	2208      	movs	r2, #8
 8000dfa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8000e28 <MX_USB_PCD_Init+0x3c>)
 8000dfe:	2202      	movs	r2, #2
 8000e00:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e02:	4b09      	ldr	r3, [pc, #36]	@ (8000e28 <MX_USB_PCD_Init+0x3c>)
 8000e04:	2202      	movs	r2, #2
 8000e06:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000e08:	4b07      	ldr	r3, [pc, #28]	@ (8000e28 <MX_USB_PCD_Init+0x3c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000e0e:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <MX_USB_PCD_Init+0x3c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000e14:	4804      	ldr	r0, [pc, #16]	@ (8000e28 <MX_USB_PCD_Init+0x3c>)
 8000e16:	f001 f8cd 	bl	8001fb4 <HAL_PCD_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000e20:	f000 f8c6 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	200001b0 	.word	0x200001b0
 8000e2c:	40005c00 	.word	0x40005c00

08000e30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e36:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <MX_DMA_Init+0x38>)
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	4a0b      	ldr	r2, [pc, #44]	@ (8000e68 <MX_DMA_Init+0x38>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6153      	str	r3, [r2, #20]
 8000e42:	4b09      	ldr	r3, [pc, #36]	@ (8000e68 <MX_DMA_Init+0x38>)
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2100      	movs	r1, #0
 8000e52:	200d      	movs	r0, #13
 8000e54:	f000 fbe9 	bl	800162a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000e58:	200d      	movs	r0, #13
 8000e5a:	f000 fc02 	bl	8001662 <HAL_NVIC_EnableIRQ>

}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40021000 	.word	0x40021000

08000e6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	@ 0x28
 8000e70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
 8000e80:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e82:	4b48      	ldr	r3, [pc, #288]	@ (8000fa4 <MX_GPIO_Init+0x138>)
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	4a47      	ldr	r2, [pc, #284]	@ (8000fa4 <MX_GPIO_Init+0x138>)
 8000e88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e8c:	6153      	str	r3, [r2, #20]
 8000e8e:	4b45      	ldr	r3, [pc, #276]	@ (8000fa4 <MX_GPIO_Init+0x138>)
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9a:	4b42      	ldr	r3, [pc, #264]	@ (8000fa4 <MX_GPIO_Init+0x138>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	4a41      	ldr	r2, [pc, #260]	@ (8000fa4 <MX_GPIO_Init+0x138>)
 8000ea0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ea4:	6153      	str	r3, [r2, #20]
 8000ea6:	4b3f      	ldr	r3, [pc, #252]	@ (8000fa4 <MX_GPIO_Init+0x138>)
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eb2:	4b3c      	ldr	r3, [pc, #240]	@ (8000fa4 <MX_GPIO_Init+0x138>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	4a3b      	ldr	r2, [pc, #236]	@ (8000fa4 <MX_GPIO_Init+0x138>)
 8000eb8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ebc:	6153      	str	r3, [r2, #20]
 8000ebe:	4b39      	ldr	r3, [pc, #228]	@ (8000fa4 <MX_GPIO_Init+0x138>)
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	4b36      	ldr	r3, [pc, #216]	@ (8000fa4 <MX_GPIO_Init+0x138>)
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	4a35      	ldr	r2, [pc, #212]	@ (8000fa4 <MX_GPIO_Init+0x138>)
 8000ed0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ed4:	6153      	str	r3, [r2, #20]
 8000ed6:	4b33      	ldr	r3, [pc, #204]	@ (8000fa4 <MX_GPIO_Init+0x138>)
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee2:	4b30      	ldr	r3, [pc, #192]	@ (8000fa4 <MX_GPIO_Init+0x138>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	4a2f      	ldr	r2, [pc, #188]	@ (8000fa4 <MX_GPIO_Init+0x138>)
 8000ee8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000eec:	6153      	str	r3, [r2, #20]
 8000eee:	4b2d      	ldr	r3, [pc, #180]	@ (8000fa4 <MX_GPIO_Init+0x138>)
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000efa:	2200      	movs	r2, #0
 8000efc:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000f00:	4829      	ldr	r0, [pc, #164]	@ (8000fa8 <MX_GPIO_Init+0x13c>)
 8000f02:	f000 ff0d 	bl	8001d20 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|TOUCH_CS_Pin
 8000f06:	2200      	movs	r2, #0
 8000f08:	f44f 71e7 	mov.w	r1, #462	@ 0x1ce
 8000f0c:	4827      	ldr	r0, [pc, #156]	@ (8000fac <MX_GPIO_Init+0x140>)
 8000f0e:	f000 ff07 	bl	8001d20 <HAL_GPIO_WritePin>
                          |TOUCH_MOSI_Pin|TOUCH_CLK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000f12:	2337      	movs	r3, #55	@ 0x37
 8000f14:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f16:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000f1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	4619      	mov	r1, r3
 8000f26:	4820      	ldr	r0, [pc, #128]	@ (8000fa8 <MX_GPIO_Init+0x13c>)
 8000f28:	f000 fd68 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000f2c:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000f30:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f32:	2301      	movs	r3, #1
 8000f34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	4818      	ldr	r0, [pc, #96]	@ (8000fa8 <MX_GPIO_Init+0x13c>)
 8000f46:	f000 fd59 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_RST_Pin LCD_DC_Pin TOUCH_CS_Pin
                           TOUCH_MOSI_Pin TOUCH_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin|TOUCH_CS_Pin
 8000f4a:	f44f 73e7 	mov.w	r3, #462	@ 0x1ce
 8000f4e:	617b      	str	r3, [r7, #20]
                          |TOUCH_MOSI_Pin|TOUCH_CLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f50:	2301      	movs	r3, #1
 8000f52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	4619      	mov	r1, r3
 8000f62:	4812      	ldr	r0, [pc, #72]	@ (8000fac <MX_GPIO_Init+0x140>)
 8000f64:	f000 fd4a 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f7e:	f000 fd3d 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_MISO_Pin TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_MISO_Pin|TOUCH_IRQ_Pin;
 8000f82:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	4619      	mov	r1, r3
 8000f96:	4805      	ldr	r0, [pc, #20]	@ (8000fac <MX_GPIO_Init+0x140>)
 8000f98:	f000 fd30 	bl	80019fc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f9c:	bf00      	nop
 8000f9e:	3728      	adds	r7, #40	@ 0x28
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	48001000 	.word	0x48001000
 8000fac:	48000800 	.word	0x48000800

08000fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb4:	b672      	cpsid	i
}
 8000fb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <Error_Handler+0x8>

08000fbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001000 <HAL_MspInit+0x44>)
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	4a0e      	ldr	r2, [pc, #56]	@ (8001000 <HAL_MspInit+0x44>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6193      	str	r3, [r2, #24]
 8000fce:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <HAL_MspInit+0x44>)
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fda:	4b09      	ldr	r3, [pc, #36]	@ (8001000 <HAL_MspInit+0x44>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	4a08      	ldr	r2, [pc, #32]	@ (8001000 <HAL_MspInit+0x44>)
 8000fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe4:	61d3      	str	r3, [r2, #28]
 8000fe6:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <HAL_MspInit+0x44>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fee:	603b      	str	r3, [r7, #0]
 8000ff0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ff2:	2007      	movs	r0, #7
 8000ff4:	f000 fb0e 	bl	8001614 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40021000 	.word	0x40021000

08001004 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08a      	sub	sp, #40	@ 0x28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a17      	ldr	r2, [pc, #92]	@ (8001080 <HAL_I2C_MspInit+0x7c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d127      	bne.n	8001076 <HAL_I2C_MspInit+0x72>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	4b17      	ldr	r3, [pc, #92]	@ (8001084 <HAL_I2C_MspInit+0x80>)
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	4a16      	ldr	r2, [pc, #88]	@ (8001084 <HAL_I2C_MspInit+0x80>)
 800102c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001030:	6153      	str	r3, [r2, #20]
 8001032:	4b14      	ldr	r3, [pc, #80]	@ (8001084 <HAL_I2C_MspInit+0x80>)
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800103e:	23c0      	movs	r3, #192	@ 0xc0
 8001040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001042:	2312      	movs	r3, #18
 8001044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001046:	2301      	movs	r3, #1
 8001048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800104a:	2303      	movs	r3, #3
 800104c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800104e:	2304      	movs	r3, #4
 8001050:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	480b      	ldr	r0, [pc, #44]	@ (8001088 <HAL_I2C_MspInit+0x84>)
 800105a:	f000 fccf 	bl	80019fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800105e:	4b09      	ldr	r3, [pc, #36]	@ (8001084 <HAL_I2C_MspInit+0x80>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	4a08      	ldr	r2, [pc, #32]	@ (8001084 <HAL_I2C_MspInit+0x80>)
 8001064:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001068:	61d3      	str	r3, [r2, #28]
 800106a:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <HAL_I2C_MspInit+0x80>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001076:	bf00      	nop
 8001078:	3728      	adds	r7, #40	@ 0x28
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40005400 	.word	0x40005400
 8001084:	40021000 	.word	0x40021000
 8001088:	48000400 	.word	0x48000400

0800108c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	@ 0x28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a2a      	ldr	r2, [pc, #168]	@ (8001154 <HAL_SPI_MspInit+0xc8>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d14e      	bne.n	800114c <HAL_SPI_MspInit+0xc0>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001158 <HAL_SPI_MspInit+0xcc>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	4a29      	ldr	r2, [pc, #164]	@ (8001158 <HAL_SPI_MspInit+0xcc>)
 80010b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010b8:	6193      	str	r3, [r2, #24]
 80010ba:	4b27      	ldr	r3, [pc, #156]	@ (8001158 <HAL_SPI_MspInit+0xcc>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	4b24      	ldr	r3, [pc, #144]	@ (8001158 <HAL_SPI_MspInit+0xcc>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	4a23      	ldr	r2, [pc, #140]	@ (8001158 <HAL_SPI_MspInit+0xcc>)
 80010cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010d0:	6153      	str	r3, [r2, #20]
 80010d2:	4b21      	ldr	r3, [pc, #132]	@ (8001158 <HAL_SPI_MspInit+0xcc>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80010de:	23e0      	movs	r3, #224	@ 0xe0
 80010e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ea:	2303      	movs	r3, #3
 80010ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010ee:	2305      	movs	r3, #5
 80010f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010fc:	f000 fc7e 	bl	80019fc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001100:	4b16      	ldr	r3, [pc, #88]	@ (800115c <HAL_SPI_MspInit+0xd0>)
 8001102:	4a17      	ldr	r2, [pc, #92]	@ (8001160 <HAL_SPI_MspInit+0xd4>)
 8001104:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001106:	4b15      	ldr	r3, [pc, #84]	@ (800115c <HAL_SPI_MspInit+0xd0>)
 8001108:	2210      	movs	r2, #16
 800110a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800110c:	4b13      	ldr	r3, [pc, #76]	@ (800115c <HAL_SPI_MspInit+0xd0>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001112:	4b12      	ldr	r3, [pc, #72]	@ (800115c <HAL_SPI_MspInit+0xd0>)
 8001114:	2280      	movs	r2, #128	@ 0x80
 8001116:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001118:	4b10      	ldr	r3, [pc, #64]	@ (800115c <HAL_SPI_MspInit+0xd0>)
 800111a:	2200      	movs	r2, #0
 800111c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800111e:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <HAL_SPI_MspInit+0xd0>)
 8001120:	2200      	movs	r2, #0
 8001122:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001124:	4b0d      	ldr	r3, [pc, #52]	@ (800115c <HAL_SPI_MspInit+0xd0>)
 8001126:	2200      	movs	r2, #0
 8001128:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800112a:	4b0c      	ldr	r3, [pc, #48]	@ (800115c <HAL_SPI_MspInit+0xd0>)
 800112c:	2200      	movs	r2, #0
 800112e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001130:	480a      	ldr	r0, [pc, #40]	@ (800115c <HAL_SPI_MspInit+0xd0>)
 8001132:	f000 fab0 	bl	8001696 <HAL_DMA_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 800113c:	f7ff ff38 	bl	8000fb0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a06      	ldr	r2, [pc, #24]	@ (800115c <HAL_SPI_MspInit+0xd0>)
 8001144:	655a      	str	r2, [r3, #84]	@ 0x54
 8001146:	4a05      	ldr	r2, [pc, #20]	@ (800115c <HAL_SPI_MspInit+0xd0>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800114c:	bf00      	nop
 800114e:	3728      	adds	r7, #40	@ 0x28
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40013000 	.word	0x40013000
 8001158:	40021000 	.word	0x40021000
 800115c:	200000e4 	.word	0x200000e4
 8001160:	40020030 	.word	0x40020030

08001164 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	@ 0x28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a17      	ldr	r2, [pc, #92]	@ (80011e0 <HAL_UART_MspInit+0x7c>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d127      	bne.n	80011d6 <HAL_UART_MspInit+0x72>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001186:	4b17      	ldr	r3, [pc, #92]	@ (80011e4 <HAL_UART_MspInit+0x80>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	4a16      	ldr	r2, [pc, #88]	@ (80011e4 <HAL_UART_MspInit+0x80>)
 800118c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001190:	6193      	str	r3, [r2, #24]
 8001192:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <HAL_UART_MspInit+0x80>)
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800119e:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <HAL_UART_MspInit+0x80>)
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	4a10      	ldr	r2, [pc, #64]	@ (80011e4 <HAL_UART_MspInit+0x80>)
 80011a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80011a8:	6153      	str	r3, [r2, #20]
 80011aa:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <HAL_UART_MspInit+0x80>)
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80011b6:	2330      	movs	r3, #48	@ 0x30
 80011b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c2:	2303      	movs	r3, #3
 80011c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011c6:	2307      	movs	r3, #7
 80011c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	4619      	mov	r1, r3
 80011d0:	4805      	ldr	r0, [pc, #20]	@ (80011e8 <HAL_UART_MspInit+0x84>)
 80011d2:	f000 fc13 	bl	80019fc <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80011d6:	bf00      	nop
 80011d8:	3728      	adds	r7, #40	@ 0x28
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40013800 	.word	0x40013800
 80011e4:	40021000 	.word	0x40021000
 80011e8:	48000800 	.word	0x48000800

080011ec <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	@ 0x28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a18      	ldr	r2, [pc, #96]	@ (800126c <HAL_PCD_MspInit+0x80>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d129      	bne.n	8001262 <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	4b18      	ldr	r3, [pc, #96]	@ (8001270 <HAL_PCD_MspInit+0x84>)
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	4a17      	ldr	r2, [pc, #92]	@ (8001270 <HAL_PCD_MspInit+0x84>)
 8001214:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001218:	6153      	str	r3, [r2, #20]
 800121a:	4b15      	ldr	r3, [pc, #84]	@ (8001270 <HAL_PCD_MspInit+0x84>)
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001226:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800122a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001238:	230e      	movs	r3, #14
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001246:	f000 fbd9 	bl	80019fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800124a:	4b09      	ldr	r3, [pc, #36]	@ (8001270 <HAL_PCD_MspInit+0x84>)
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	4a08      	ldr	r2, [pc, #32]	@ (8001270 <HAL_PCD_MspInit+0x84>)
 8001250:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001254:	61d3      	str	r3, [r2, #28]
 8001256:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <HAL_PCD_MspInit+0x84>)
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 8001262:	bf00      	nop
 8001264:	3728      	adds	r7, #40	@ 0x28
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40005c00 	.word	0x40005c00
 8001270:	40021000 	.word	0x40021000

08001274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <NMI_Handler+0x4>

0800127c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <HardFault_Handler+0x4>

08001284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <MemManage_Handler+0x4>

0800128c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <BusFault_Handler+0x4>

08001294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <UsageFault_Handler+0x4>

0800129c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ca:	f000 f88f 	bl	80013ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80012d8:	4802      	ldr	r0, [pc, #8]	@ (80012e4 <DMA1_Channel3_IRQHandler+0x10>)
 80012da:	f000 fa82 	bl	80017e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200000e4 	.word	0x200000e4

080012e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012ec:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <SystemInit+0x20>)
 80012ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012f2:	4a05      	ldr	r2, [pc, #20]	@ (8001308 <SystemInit+0x20>)
 80012f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800130c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001344 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001310:	f7ff ffea 	bl	80012e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001314:	480c      	ldr	r0, [pc, #48]	@ (8001348 <LoopForever+0x6>)
  ldr r1, =_edata
 8001316:	490d      	ldr	r1, [pc, #52]	@ (800134c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001318:	4a0d      	ldr	r2, [pc, #52]	@ (8001350 <LoopForever+0xe>)
  movs r3, #0
 800131a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800131c:	e002      	b.n	8001324 <LoopCopyDataInit>

0800131e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800131e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001322:	3304      	adds	r3, #4

08001324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001328:	d3f9      	bcc.n	800131e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800132a:	4a0a      	ldr	r2, [pc, #40]	@ (8001354 <LoopForever+0x12>)
  ldr r4, =_ebss
 800132c:	4c0a      	ldr	r4, [pc, #40]	@ (8001358 <LoopForever+0x16>)
  movs r3, #0
 800132e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001330:	e001      	b.n	8001336 <LoopFillZerobss>

08001332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001334:	3204      	adds	r2, #4

08001336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001338:	d3fb      	bcc.n	8001332 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800133a:	f003 fc59 	bl	8004bf0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800133e:	f7ff fc01 	bl	8000b44 <main>

08001342 <LoopForever>:

LoopForever:
    b LoopForever
 8001342:	e7fe      	b.n	8001342 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001344:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800134c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001350:	08005de0 	.word	0x08005de0
  ldr r2, =_sbss
 8001354:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001358:	20000488 	.word	0x20000488

0800135c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800135c:	e7fe      	b.n	800135c <ADC1_2_IRQHandler>
	...

08001360 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001364:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <HAL_Init+0x28>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a07      	ldr	r2, [pc, #28]	@ (8001388 <HAL_Init+0x28>)
 800136a:	f043 0310 	orr.w	r3, r3, #16
 800136e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001370:	2003      	movs	r0, #3
 8001372:	f000 f94f 	bl	8001614 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001376:	2000      	movs	r0, #0
 8001378:	f000 f808 	bl	800138c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800137c:	f7ff fe1e 	bl	8000fbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40022000 	.word	0x40022000

0800138c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001394:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <HAL_InitTick+0x54>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <HAL_InitTick+0x58>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4619      	mov	r1, r3
 800139e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 f967 	bl	800167e <HAL_SYSTICK_Config>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e00e      	b.n	80013d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b0f      	cmp	r3, #15
 80013be:	d80a      	bhi.n	80013d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c0:	2200      	movs	r2, #0
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013c8:	f000 f92f 	bl	800162a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013cc:	4a06      	ldr	r2, [pc, #24]	@ (80013e8 <HAL_InitTick+0x5c>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
 80013d4:	e000      	b.n	80013d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000004 	.word	0x20000004
 80013e4:	2000000c 	.word	0x2000000c
 80013e8:	20000008 	.word	0x20000008

080013ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f0:	4b06      	ldr	r3, [pc, #24]	@ (800140c <HAL_IncTick+0x20>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <HAL_IncTick+0x24>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4413      	add	r3, r2
 80013fc:	4a04      	ldr	r2, [pc, #16]	@ (8001410 <HAL_IncTick+0x24>)
 80013fe:	6013      	str	r3, [r2, #0]
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	2000000c 	.word	0x2000000c
 8001410:	20000484 	.word	0x20000484

08001414 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return uwTick;  
 8001418:	4b03      	ldr	r3, [pc, #12]	@ (8001428 <HAL_GetTick+0x14>)
 800141a:	681b      	ldr	r3, [r3, #0]
}
 800141c:	4618      	mov	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	20000484 	.word	0x20000484

0800142c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001434:	f7ff ffee 	bl	8001414 <HAL_GetTick>
 8001438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001444:	d005      	beq.n	8001452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001446:	4b0a      	ldr	r3, [pc, #40]	@ (8001470 <HAL_Delay+0x44>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4413      	add	r3, r2
 8001450:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001452:	bf00      	nop
 8001454:	f7ff ffde 	bl	8001414 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	429a      	cmp	r2, r3
 8001462:	d8f7      	bhi.n	8001454 <HAL_Delay+0x28>
  {
  }
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	2000000c 	.word	0x2000000c

08001474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001484:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001490:	4013      	ands	r3, r2
 8001492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800149c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014a6:	4a04      	ldr	r2, [pc, #16]	@ (80014b8 <__NVIC_SetPriorityGrouping+0x44>)
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	60d3      	str	r3, [r2, #12]
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c0:	4b04      	ldr	r3, [pc, #16]	@ (80014d4 <__NVIC_GetPriorityGrouping+0x18>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	0a1b      	lsrs	r3, r3, #8
 80014c6:	f003 0307 	and.w	r3, r3, #7
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	db0b      	blt.n	8001502 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	f003 021f 	and.w	r2, r3, #31
 80014f0:	4907      	ldr	r1, [pc, #28]	@ (8001510 <__NVIC_EnableIRQ+0x38>)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	095b      	lsrs	r3, r3, #5
 80014f8:	2001      	movs	r0, #1
 80014fa:	fa00 f202 	lsl.w	r2, r0, r2
 80014fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000e100 	.word	0xe000e100

08001514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	6039      	str	r1, [r7, #0]
 800151e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001524:	2b00      	cmp	r3, #0
 8001526:	db0a      	blt.n	800153e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	b2da      	uxtb	r2, r3
 800152c:	490c      	ldr	r1, [pc, #48]	@ (8001560 <__NVIC_SetPriority+0x4c>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	0112      	lsls	r2, r2, #4
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	440b      	add	r3, r1
 8001538:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800153c:	e00a      	b.n	8001554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4908      	ldr	r1, [pc, #32]	@ (8001564 <__NVIC_SetPriority+0x50>)
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	3b04      	subs	r3, #4
 800154c:	0112      	lsls	r2, r2, #4
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	440b      	add	r3, r1
 8001552:	761a      	strb	r2, [r3, #24]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000e100 	.word	0xe000e100
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001568:	b480      	push	{r7}
 800156a:	b089      	sub	sp, #36	@ 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f1c3 0307 	rsb	r3, r3, #7
 8001582:	2b04      	cmp	r3, #4
 8001584:	bf28      	it	cs
 8001586:	2304      	movcs	r3, #4
 8001588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3304      	adds	r3, #4
 800158e:	2b06      	cmp	r3, #6
 8001590:	d902      	bls.n	8001598 <NVIC_EncodePriority+0x30>
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3b03      	subs	r3, #3
 8001596:	e000      	b.n	800159a <NVIC_EncodePriority+0x32>
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43da      	mvns	r2, r3
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	401a      	ands	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	43d9      	mvns	r1, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	4313      	orrs	r3, r2
         );
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3724      	adds	r7, #36	@ 0x24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015e0:	d301      	bcc.n	80015e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00f      	b.n	8001606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001610 <SysTick_Config+0x40>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ee:	210f      	movs	r1, #15
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015f4:	f7ff ff8e 	bl	8001514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f8:	4b05      	ldr	r3, [pc, #20]	@ (8001610 <SysTick_Config+0x40>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fe:	4b04      	ldr	r3, [pc, #16]	@ (8001610 <SysTick_Config+0x40>)
 8001600:	2207      	movs	r2, #7
 8001602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	e000e010 	.word	0xe000e010

08001614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ff29 	bl	8001474 <__NVIC_SetPriorityGrouping>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	4603      	mov	r3, r0
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
 8001636:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800163c:	f7ff ff3e 	bl	80014bc <__NVIC_GetPriorityGrouping>
 8001640:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	6978      	ldr	r0, [r7, #20]
 8001648:	f7ff ff8e 	bl	8001568 <NVIC_EncodePriority>
 800164c:	4602      	mov	r2, r0
 800164e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001652:	4611      	mov	r1, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff5d 	bl	8001514 <__NVIC_SetPriority>
}
 800165a:	bf00      	nop
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	4603      	mov	r3, r0
 800166a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff31 	bl	80014d8 <__NVIC_EnableIRQ>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff ffa2 	bl	80015d0 <SysTick_Config>
 800168c:	4603      	mov	r3, r0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b084      	sub	sp, #16
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d101      	bne.n	80016ac <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e037      	b.n	800171c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2202      	movs	r2, #2
 80016b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80016c2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80016c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80016d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 f940 	bl	8001984 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
 8001730:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f893 3020 	ldrb.w	r3, [r3, #32]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d101      	bne.n	8001744 <HAL_DMA_Start_IT+0x20>
 8001740:	2302      	movs	r3, #2
 8001742:	e04a      	b.n	80017da <HAL_DMA_Start_IT+0xb6>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001752:	2b01      	cmp	r3, #1
 8001754:	d13a      	bne.n	80017cc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2202      	movs	r2, #2
 800175a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2200      	movs	r2, #0
 8001762:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 0201 	bic.w	r2, r2, #1
 8001772:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f000 f8d4 	bl	8001928 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001784:	2b00      	cmp	r3, #0
 8001786:	d008      	beq.n	800179a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 020e 	orr.w	r2, r2, #14
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	e00f      	b.n	80017ba <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f042 020a 	orr.w	r2, r2, #10
 80017a8:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0204 	bic.w	r2, r2, #4
 80017b8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f042 0201 	orr.w	r2, r2, #1
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	e005      	b.n	80017d8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80017d4:	2302      	movs	r3, #2
 80017d6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80017d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b084      	sub	sp, #16
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fe:	2204      	movs	r2, #4
 8001800:	409a      	lsls	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4013      	ands	r3, r2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d024      	beq.n	8001854 <HAL_DMA_IRQHandler+0x72>
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d01f      	beq.n	8001854 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0320 	and.w	r3, r3, #32
 800181e:	2b00      	cmp	r3, #0
 8001820:	d107      	bne.n	8001832 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 0204 	bic.w	r2, r2, #4
 8001830:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800183a:	2104      	movs	r1, #4
 800183c:	fa01 f202 	lsl.w	r2, r1, r2
 8001840:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001846:	2b00      	cmp	r3, #0
 8001848:	d06a      	beq.n	8001920 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001852:	e065      	b.n	8001920 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001858:	2202      	movs	r2, #2
 800185a:	409a      	lsls	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4013      	ands	r3, r2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d02c      	beq.n	80018be <HAL_DMA_IRQHandler+0xdc>
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d027      	beq.n	80018be <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0320 	and.w	r3, r3, #32
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10b      	bne.n	8001894 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f022 020a 	bic.w	r2, r2, #10
 800188a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800189c:	2102      	movs	r1, #2
 800189e:	fa01 f202 	lsl.w	r2, r1, r2
 80018a2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d035      	beq.n	8001920 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80018bc:	e030      	b.n	8001920 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c2:	2208      	movs	r2, #8
 80018c4:	409a      	lsls	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4013      	ands	r3, r2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d028      	beq.n	8001920 <HAL_DMA_IRQHandler+0x13e>
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d023      	beq.n	8001920 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 020e 	bic.w	r2, r2, #14
 80018e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018f0:	2101      	movs	r1, #1
 80018f2:	fa01 f202 	lsl.w	r2, r1, r2
 80018f6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001912:	2b00      	cmp	r3, #0
 8001914:	d004      	beq.n	8001920 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	4798      	blx	r3
    }
  }
}
 800191e:	e7ff      	b.n	8001920 <HAL_DMA_IRQHandler+0x13e>
 8001920:	bf00      	nop
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
 8001934:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800193e:	2101      	movs	r1, #1
 8001940:	fa01 f202 	lsl.w	r2, r1, r2
 8001944:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b10      	cmp	r3, #16
 8001954:	d108      	bne.n	8001968 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001966:	e007      	b.n	8001978 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	68ba      	ldr	r2, [r7, #8]
 800196e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	60da      	str	r2, [r3, #12]
}
 8001978:	bf00      	nop
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	4b14      	ldr	r3, [pc, #80]	@ (80019e4 <DMA_CalcBaseAndBitshift+0x60>)
 8001994:	429a      	cmp	r2, r3
 8001996:	d80f      	bhi.n	80019b8 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	461a      	mov	r2, r3
 800199e:	4b12      	ldr	r3, [pc, #72]	@ (80019e8 <DMA_CalcBaseAndBitshift+0x64>)
 80019a0:	4413      	add	r3, r2
 80019a2:	4a12      	ldr	r2, [pc, #72]	@ (80019ec <DMA_CalcBaseAndBitshift+0x68>)
 80019a4:	fba2 2303 	umull	r2, r3, r2, r3
 80019a8:	091b      	lsrs	r3, r3, #4
 80019aa:	009a      	lsls	r2, r3, #2
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a0f      	ldr	r2, [pc, #60]	@ (80019f0 <DMA_CalcBaseAndBitshift+0x6c>)
 80019b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80019b6:	e00e      	b.n	80019d6 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	4b0d      	ldr	r3, [pc, #52]	@ (80019f4 <DMA_CalcBaseAndBitshift+0x70>)
 80019c0:	4413      	add	r3, r2
 80019c2:	4a0a      	ldr	r2, [pc, #40]	@ (80019ec <DMA_CalcBaseAndBitshift+0x68>)
 80019c4:	fba2 2303 	umull	r2, r3, r2, r3
 80019c8:	091b      	lsrs	r3, r3, #4
 80019ca:	009a      	lsls	r2, r3, #2
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a09      	ldr	r2, [pc, #36]	@ (80019f8 <DMA_CalcBaseAndBitshift+0x74>)
 80019d4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40020407 	.word	0x40020407
 80019e8:	bffdfff8 	.word	0xbffdfff8
 80019ec:	cccccccd 	.word	0xcccccccd
 80019f0:	40020000 	.word	0x40020000
 80019f4:	bffdfbf8 	.word	0xbffdfbf8
 80019f8:	40020400 	.word	0x40020400

080019fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b087      	sub	sp, #28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a0a:	e154      	b.n	8001cb6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	2101      	movs	r1, #1
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	fa01 f303 	lsl.w	r3, r1, r3
 8001a18:	4013      	ands	r3, r2
 8001a1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 8146 	beq.w	8001cb0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d005      	beq.n	8001a3c <HAL_GPIO_Init+0x40>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d130      	bne.n	8001a9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	2203      	movs	r2, #3
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	68da      	ldr	r2, [r3, #12]
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a72:	2201      	movs	r2, #1
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	091b      	lsrs	r3, r3, #4
 8001a88:	f003 0201 	and.w	r2, r3, #1
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	2b03      	cmp	r3, #3
 8001aa8:	d017      	beq.n	8001ada <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43db      	mvns	r3, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d123      	bne.n	8001b2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	08da      	lsrs	r2, r3, #3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3208      	adds	r2, #8
 8001aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	220f      	movs	r2, #15
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4013      	ands	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	691a      	ldr	r2, [r3, #16]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	08da      	lsrs	r2, r3, #3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3208      	adds	r2, #8
 8001b28:	6939      	ldr	r1, [r7, #16]
 8001b2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	2203      	movs	r2, #3
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4013      	ands	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 0203 	and.w	r2, r3, #3
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 80a0 	beq.w	8001cb0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b70:	4b58      	ldr	r3, [pc, #352]	@ (8001cd4 <HAL_GPIO_Init+0x2d8>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	4a57      	ldr	r2, [pc, #348]	@ (8001cd4 <HAL_GPIO_Init+0x2d8>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6193      	str	r3, [r2, #24]
 8001b7c:	4b55      	ldr	r3, [pc, #340]	@ (8001cd4 <HAL_GPIO_Init+0x2d8>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b88:	4a53      	ldr	r2, [pc, #332]	@ (8001cd8 <HAL_GPIO_Init+0x2dc>)
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	089b      	lsrs	r3, r3, #2
 8001b8e:	3302      	adds	r3, #2
 8001b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	220f      	movs	r2, #15
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001bb2:	d019      	beq.n	8001be8 <HAL_GPIO_Init+0x1ec>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a49      	ldr	r2, [pc, #292]	@ (8001cdc <HAL_GPIO_Init+0x2e0>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d013      	beq.n	8001be4 <HAL_GPIO_Init+0x1e8>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a48      	ldr	r2, [pc, #288]	@ (8001ce0 <HAL_GPIO_Init+0x2e4>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d00d      	beq.n	8001be0 <HAL_GPIO_Init+0x1e4>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a47      	ldr	r2, [pc, #284]	@ (8001ce4 <HAL_GPIO_Init+0x2e8>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d007      	beq.n	8001bdc <HAL_GPIO_Init+0x1e0>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a46      	ldr	r2, [pc, #280]	@ (8001ce8 <HAL_GPIO_Init+0x2ec>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d101      	bne.n	8001bd8 <HAL_GPIO_Init+0x1dc>
 8001bd4:	2304      	movs	r3, #4
 8001bd6:	e008      	b.n	8001bea <HAL_GPIO_Init+0x1ee>
 8001bd8:	2305      	movs	r3, #5
 8001bda:	e006      	b.n	8001bea <HAL_GPIO_Init+0x1ee>
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e004      	b.n	8001bea <HAL_GPIO_Init+0x1ee>
 8001be0:	2302      	movs	r3, #2
 8001be2:	e002      	b.n	8001bea <HAL_GPIO_Init+0x1ee>
 8001be4:	2301      	movs	r3, #1
 8001be6:	e000      	b.n	8001bea <HAL_GPIO_Init+0x1ee>
 8001be8:	2300      	movs	r3, #0
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	f002 0203 	and.w	r2, r2, #3
 8001bf0:	0092      	lsls	r2, r2, #2
 8001bf2:	4093      	lsls	r3, r2
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bfa:	4937      	ldr	r1, [pc, #220]	@ (8001cd8 <HAL_GPIO_Init+0x2dc>)
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	089b      	lsrs	r3, r3, #2
 8001c00:	3302      	adds	r3, #2
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c08:	4b38      	ldr	r3, [pc, #224]	@ (8001cec <HAL_GPIO_Init+0x2f0>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4013      	ands	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c2c:	4a2f      	ldr	r2, [pc, #188]	@ (8001cec <HAL_GPIO_Init+0x2f0>)
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c32:	4b2e      	ldr	r3, [pc, #184]	@ (8001cec <HAL_GPIO_Init+0x2f0>)
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c56:	4a25      	ldr	r2, [pc, #148]	@ (8001cec <HAL_GPIO_Init+0x2f0>)
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c5c:	4b23      	ldr	r3, [pc, #140]	@ (8001cec <HAL_GPIO_Init+0x2f0>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c80:	4a1a      	ldr	r2, [pc, #104]	@ (8001cec <HAL_GPIO_Init+0x2f0>)
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c86:	4b19      	ldr	r3, [pc, #100]	@ (8001cec <HAL_GPIO_Init+0x2f0>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4013      	ands	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001caa:	4a10      	ldr	r2, [pc, #64]	@ (8001cec <HAL_GPIO_Init+0x2f0>)
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f47f aea3 	bne.w	8001a0c <HAL_GPIO_Init+0x10>
  }
}
 8001cc6:	bf00      	nop
 8001cc8:	bf00      	nop
 8001cca:	371c      	adds	r7, #28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40010000 	.word	0x40010000
 8001cdc:	48000400 	.word	0x48000400
 8001ce0:	48000800 	.word	0x48000800
 8001ce4:	48000c00 	.word	0x48000c00
 8001ce8:	48001000 	.word	0x48001000
 8001cec:	40010400 	.word	0x40010400

08001cf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691a      	ldr	r2, [r3, #16]
 8001d00:	887b      	ldrh	r3, [r7, #2]
 8001d02:	4013      	ands	r3, r2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d002      	beq.n	8001d0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	73fb      	strb	r3, [r7, #15]
 8001d0c:	e001      	b.n	8001d12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	807b      	strh	r3, [r7, #2]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d30:	787b      	ldrb	r3, [r7, #1]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d36:	887a      	ldrh	r2, [r7, #2]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d3c:	e002      	b.n	8001d44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d3e:	887a      	ldrh	r2, [r7, #2]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e08d      	b.n	8001e7e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d106      	bne.n	8001d7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff f944 	bl	8001004 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2224      	movs	r2, #36	@ 0x24
 8001d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0201 	bic.w	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001da0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001db0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d107      	bne.n	8001dca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	e006      	b.n	8001dd8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001dd6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d108      	bne.n	8001df2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001dee:	605a      	str	r2, [r3, #4]
 8001df0:	e007      	b.n	8001e02 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6812      	ldr	r2, [r2, #0]
 8001e0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68da      	ldr	r2, [r3, #12]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691a      	ldr	r2, [r3, #16]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69d9      	ldr	r1, [r3, #28]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a1a      	ldr	r2, [r3, #32]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f042 0201 	orr.w	r2, r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2220      	movs	r2, #32
 8001e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b20      	cmp	r3, #32
 8001e9a:	d138      	bne.n	8001f0e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e032      	b.n	8001f10 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2224      	movs	r2, #36	@ 0x24
 8001eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0201 	bic.w	r2, r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001ed8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6819      	ldr	r1, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f042 0201 	orr.w	r2, r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2220      	movs	r2, #32
 8001efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	e000      	b.n	8001f10 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f0e:	2302      	movs	r3, #2
  }
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b20      	cmp	r3, #32
 8001f30:	d139      	bne.n	8001fa6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e033      	b.n	8001fa8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2224      	movs	r2, #36	@ 0x24
 8001f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0201 	bic.w	r2, r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f6e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	021b      	lsls	r3, r3, #8
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f042 0201 	orr.w	r2, r2, #1
 8001f90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2220      	movs	r2, #32
 8001f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	e000      	b.n	8001fa8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fa6:	2302      	movs	r3, #2
  }
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e0b9      	b.n	800213a <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d106      	bne.n	8001fe0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff f906 	bl	80011ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2203      	movs	r2, #3
 8001fe4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f002 fdbe 	bl	8004b6e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	73fb      	strb	r3, [r7, #15]
 8001ff6:	e03e      	b.n	8002076 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ff8:	7bfa      	ldrb	r2, [r7, #15]
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	440b      	add	r3, r1
 8002006:	3311      	adds	r3, #17
 8002008:	2201      	movs	r2, #1
 800200a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800200c:	7bfa      	ldrb	r2, [r7, #15]
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	440b      	add	r3, r1
 800201a:	3310      	adds	r3, #16
 800201c:	7bfa      	ldrb	r2, [r7, #15]
 800201e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002020:	7bfa      	ldrb	r2, [r7, #15]
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	440b      	add	r3, r1
 800202e:	3313      	adds	r3, #19
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002034:	7bfa      	ldrb	r2, [r7, #15]
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	440b      	add	r3, r1
 8002042:	3320      	adds	r3, #32
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002048:	7bfa      	ldrb	r2, [r7, #15]
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	440b      	add	r3, r1
 8002056:	3324      	adds	r3, #36	@ 0x24
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800205c:	7bfb      	ldrb	r3, [r7, #15]
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	1c5a      	adds	r2, r3, #1
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	440b      	add	r3, r1
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	3301      	adds	r3, #1
 8002074:	73fb      	strb	r3, [r7, #15]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	791b      	ldrb	r3, [r3, #4]
 800207a:	7bfa      	ldrb	r2, [r7, #15]
 800207c:	429a      	cmp	r2, r3
 800207e:	d3bb      	bcc.n	8001ff8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002080:	2300      	movs	r3, #0
 8002082:	73fb      	strb	r3, [r7, #15]
 8002084:	e044      	b.n	8002110 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002086:	7bfa      	ldrb	r2, [r7, #15]
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	440b      	add	r3, r1
 8002094:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800209c:	7bfa      	ldrb	r2, [r7, #15]
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	440b      	add	r3, r1
 80020aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80020ae:	7bfa      	ldrb	r2, [r7, #15]
 80020b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020b2:	7bfa      	ldrb	r2, [r7, #15]
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	440b      	add	r3, r1
 80020c0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80020c4:	2200      	movs	r2, #0
 80020c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020c8:	7bfa      	ldrb	r2, [r7, #15]
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	440b      	add	r3, r1
 80020d6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020de:	7bfa      	ldrb	r2, [r7, #15]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	440b      	add	r3, r1
 80020ec:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020f4:	7bfa      	ldrb	r2, [r7, #15]
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	440b      	add	r3, r1
 8002102:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800210a:	7bfb      	ldrb	r3, [r7, #15]
 800210c:	3301      	adds	r3, #1
 800210e:	73fb      	strb	r3, [r7, #15]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	791b      	ldrb	r3, [r3, #4]
 8002114:	7bfa      	ldrb	r2, [r7, #15]
 8002116:	429a      	cmp	r2, r3
 8002118:	d3b5      	bcc.n	8002086 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6818      	ldr	r0, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3304      	adds	r3, #4
 8002122:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002126:	f002 fd3d 	bl	8004ba4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800214a:	af00      	add	r7, sp, #0
 800214c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002150:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002154:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002156:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800215a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d102      	bne.n	800216a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	f000 bff4 	b.w	8003152 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800216a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800216e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 816d 	beq.w	800245a <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002180:	4bb4      	ldr	r3, [pc, #720]	@ (8002454 <HAL_RCC_OscConfig+0x310>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 030c 	and.w	r3, r3, #12
 8002188:	2b04      	cmp	r3, #4
 800218a:	d00c      	beq.n	80021a6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800218c:	4bb1      	ldr	r3, [pc, #708]	@ (8002454 <HAL_RCC_OscConfig+0x310>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 030c 	and.w	r3, r3, #12
 8002194:	2b08      	cmp	r3, #8
 8002196:	d157      	bne.n	8002248 <HAL_RCC_OscConfig+0x104>
 8002198:	4bae      	ldr	r3, [pc, #696]	@ (8002454 <HAL_RCC_OscConfig+0x310>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021a4:	d150      	bne.n	8002248 <HAL_RCC_OscConfig+0x104>
 80021a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021aa:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80021b2:	fa93 f3a3 	rbit	r3, r3
 80021b6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021ba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021be:	fab3 f383 	clz	r3, r3
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80021c6:	d802      	bhi.n	80021ce <HAL_RCC_OscConfig+0x8a>
 80021c8:	4ba2      	ldr	r3, [pc, #648]	@ (8002454 <HAL_RCC_OscConfig+0x310>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	e015      	b.n	80021fa <HAL_RCC_OscConfig+0xb6>
 80021ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021d2:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80021da:	fa93 f3a3 	rbit	r3, r3
 80021de:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80021e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021e6:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80021ea:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80021ee:	fa93 f3a3 	rbit	r3, r3
 80021f2:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80021f6:	4b97      	ldr	r3, [pc, #604]	@ (8002454 <HAL_RCC_OscConfig+0x310>)
 80021f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80021fe:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002202:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002206:	fa92 f2a2 	rbit	r2, r2
 800220a:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800220e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002212:	fab2 f282 	clz	r2, r2
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	f042 0220 	orr.w	r2, r2, #32
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	f002 021f 	and.w	r2, r2, #31
 8002222:	2101      	movs	r1, #1
 8002224:	fa01 f202 	lsl.w	r2, r1, r2
 8002228:	4013      	ands	r3, r2
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 8114 	beq.w	8002458 <HAL_RCC_OscConfig+0x314>
 8002230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002234:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	f040 810b 	bne.w	8002458 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	f000 bf85 	b.w	8003152 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002248:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800224c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002258:	d106      	bne.n	8002268 <HAL_RCC_OscConfig+0x124>
 800225a:	4b7e      	ldr	r3, [pc, #504]	@ (8002454 <HAL_RCC_OscConfig+0x310>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a7d      	ldr	r2, [pc, #500]	@ (8002454 <HAL_RCC_OscConfig+0x310>)
 8002260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	e036      	b.n	80022d6 <HAL_RCC_OscConfig+0x192>
 8002268:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800226c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10c      	bne.n	8002292 <HAL_RCC_OscConfig+0x14e>
 8002278:	4b76      	ldr	r3, [pc, #472]	@ (8002454 <HAL_RCC_OscConfig+0x310>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a75      	ldr	r2, [pc, #468]	@ (8002454 <HAL_RCC_OscConfig+0x310>)
 800227e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	4b73      	ldr	r3, [pc, #460]	@ (8002454 <HAL_RCC_OscConfig+0x310>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a72      	ldr	r2, [pc, #456]	@ (8002454 <HAL_RCC_OscConfig+0x310>)
 800228a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800228e:	6013      	str	r3, [r2, #0]
 8002290:	e021      	b.n	80022d6 <HAL_RCC_OscConfig+0x192>
 8002292:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002296:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022a2:	d10c      	bne.n	80022be <HAL_RCC_OscConfig+0x17a>
 80022a4:	4b6b      	ldr	r3, [pc, #428]	@ (8002454 <HAL_RCC_OscConfig+0x310>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a6a      	ldr	r2, [pc, #424]	@ (8002454 <HAL_RCC_OscConfig+0x310>)
 80022aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022ae:	6013      	str	r3, [r2, #0]
 80022b0:	4b68      	ldr	r3, [pc, #416]	@ (8002454 <HAL_RCC_OscConfig+0x310>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a67      	ldr	r2, [pc, #412]	@ (8002454 <HAL_RCC_OscConfig+0x310>)
 80022b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	e00b      	b.n	80022d6 <HAL_RCC_OscConfig+0x192>
 80022be:	4b65      	ldr	r3, [pc, #404]	@ (8002454 <HAL_RCC_OscConfig+0x310>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a64      	ldr	r2, [pc, #400]	@ (8002454 <HAL_RCC_OscConfig+0x310>)
 80022c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	4b62      	ldr	r3, [pc, #392]	@ (8002454 <HAL_RCC_OscConfig+0x310>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a61      	ldr	r2, [pc, #388]	@ (8002454 <HAL_RCC_OscConfig+0x310>)
 80022d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022d4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022d6:	4b5f      	ldr	r3, [pc, #380]	@ (8002454 <HAL_RCC_OscConfig+0x310>)
 80022d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022da:	f023 020f 	bic.w	r2, r3, #15
 80022de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	495a      	ldr	r1, [pc, #360]	@ (8002454 <HAL_RCC_OscConfig+0x310>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d054      	beq.n	80023aa <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002300:	f7ff f888 	bl	8001414 <HAL_GetTick>
 8002304:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002308:	e00a      	b.n	8002320 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800230a:	f7ff f883 	bl	8001414 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b64      	cmp	r3, #100	@ 0x64
 8002318:	d902      	bls.n	8002320 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	f000 bf19 	b.w	8003152 <HAL_RCC_OscConfig+0x100e>
 8002320:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002324:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800232c:	fa93 f3a3 	rbit	r3, r3
 8002330:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002334:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002338:	fab3 f383 	clz	r3, r3
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002340:	d802      	bhi.n	8002348 <HAL_RCC_OscConfig+0x204>
 8002342:	4b44      	ldr	r3, [pc, #272]	@ (8002454 <HAL_RCC_OscConfig+0x310>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	e015      	b.n	8002374 <HAL_RCC_OscConfig+0x230>
 8002348:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800234c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002350:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002354:	fa93 f3a3 	rbit	r3, r3
 8002358:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800235c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002360:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002364:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002368:	fa93 f3a3 	rbit	r3, r3
 800236c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002370:	4b38      	ldr	r3, [pc, #224]	@ (8002454 <HAL_RCC_OscConfig+0x310>)
 8002372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002374:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002378:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800237c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002380:	fa92 f2a2 	rbit	r2, r2
 8002384:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002388:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800238c:	fab2 f282 	clz	r2, r2
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	f042 0220 	orr.w	r2, r2, #32
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	f002 021f 	and.w	r2, r2, #31
 800239c:	2101      	movs	r1, #1
 800239e:	fa01 f202 	lsl.w	r2, r1, r2
 80023a2:	4013      	ands	r3, r2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0b0      	beq.n	800230a <HAL_RCC_OscConfig+0x1c6>
 80023a8:	e057      	b.n	800245a <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023aa:	f7ff f833 	bl	8001414 <HAL_GetTick>
 80023ae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023b2:	e00a      	b.n	80023ca <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023b4:	f7ff f82e 	bl	8001414 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b64      	cmp	r3, #100	@ 0x64
 80023c2:	d902      	bls.n	80023ca <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	f000 bec4 	b.w	8003152 <HAL_RCC_OscConfig+0x100e>
 80023ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023ce:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80023d6:	fa93 f3a3 	rbit	r3, r3
 80023da:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80023de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80023ea:	d802      	bhi.n	80023f2 <HAL_RCC_OscConfig+0x2ae>
 80023ec:	4b19      	ldr	r3, [pc, #100]	@ (8002454 <HAL_RCC_OscConfig+0x310>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	e015      	b.n	800241e <HAL_RCC_OscConfig+0x2da>
 80023f2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023f6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80023fe:	fa93 f3a3 	rbit	r3, r3
 8002402:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002406:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800240a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800240e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800241a:	4b0e      	ldr	r3, [pc, #56]	@ (8002454 <HAL_RCC_OscConfig+0x310>)
 800241c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002422:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002426:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800242a:	fa92 f2a2 	rbit	r2, r2
 800242e:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002432:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002436:	fab2 f282 	clz	r2, r2
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	f042 0220 	orr.w	r2, r2, #32
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	f002 021f 	and.w	r2, r2, #31
 8002446:	2101      	movs	r1, #1
 8002448:	fa01 f202 	lsl.w	r2, r1, r2
 800244c:	4013      	ands	r3, r2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1b0      	bne.n	80023b4 <HAL_RCC_OscConfig+0x270>
 8002452:	e002      	b.n	800245a <HAL_RCC_OscConfig+0x316>
 8002454:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800245a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800245e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 816c 	beq.w	8002748 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002470:	4bcc      	ldr	r3, [pc, #816]	@ (80027a4 <HAL_RCC_OscConfig+0x660>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 030c 	and.w	r3, r3, #12
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00b      	beq.n	8002494 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800247c:	4bc9      	ldr	r3, [pc, #804]	@ (80027a4 <HAL_RCC_OscConfig+0x660>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 030c 	and.w	r3, r3, #12
 8002484:	2b08      	cmp	r3, #8
 8002486:	d16d      	bne.n	8002564 <HAL_RCC_OscConfig+0x420>
 8002488:	4bc6      	ldr	r3, [pc, #792]	@ (80027a4 <HAL_RCC_OscConfig+0x660>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d167      	bne.n	8002564 <HAL_RCC_OscConfig+0x420>
 8002494:	2302      	movs	r3, #2
 8002496:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800249e:	fa93 f3a3 	rbit	r3, r3
 80024a2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80024a6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024aa:	fab3 f383 	clz	r3, r3
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80024b2:	d802      	bhi.n	80024ba <HAL_RCC_OscConfig+0x376>
 80024b4:	4bbb      	ldr	r3, [pc, #748]	@ (80027a4 <HAL_RCC_OscConfig+0x660>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	e013      	b.n	80024e2 <HAL_RCC_OscConfig+0x39e>
 80024ba:	2302      	movs	r3, #2
 80024bc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80024c4:	fa93 f3a3 	rbit	r3, r3
 80024c8:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80024cc:	2302      	movs	r3, #2
 80024ce:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80024d2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80024d6:	fa93 f3a3 	rbit	r3, r3
 80024da:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80024de:	4bb1      	ldr	r3, [pc, #708]	@ (80027a4 <HAL_RCC_OscConfig+0x660>)
 80024e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e2:	2202      	movs	r2, #2
 80024e4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80024e8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80024ec:	fa92 f2a2 	rbit	r2, r2
 80024f0:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80024f4:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80024f8:	fab2 f282 	clz	r2, r2
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	f042 0220 	orr.w	r2, r2, #32
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	f002 021f 	and.w	r2, r2, #31
 8002508:	2101      	movs	r1, #1
 800250a:	fa01 f202 	lsl.w	r2, r1, r2
 800250e:	4013      	ands	r3, r2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00a      	beq.n	800252a <HAL_RCC_OscConfig+0x3e6>
 8002514:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002518:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d002      	beq.n	800252a <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	f000 be14 	b.w	8003152 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252a:	4b9e      	ldr	r3, [pc, #632]	@ (80027a4 <HAL_RCC_OscConfig+0x660>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002532:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002536:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	21f8      	movs	r1, #248	@ 0xf8
 8002540:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002544:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002548:	fa91 f1a1 	rbit	r1, r1
 800254c:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002550:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002554:	fab1 f181 	clz	r1, r1
 8002558:	b2c9      	uxtb	r1, r1
 800255a:	408b      	lsls	r3, r1
 800255c:	4991      	ldr	r1, [pc, #580]	@ (80027a4 <HAL_RCC_OscConfig+0x660>)
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002562:	e0f1      	b.n	8002748 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002564:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002568:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 8083 	beq.w	800267c <HAL_RCC_OscConfig+0x538>
 8002576:	2301      	movs	r3, #1
 8002578:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002580:	fa93 f3a3 	rbit	r3, r3
 8002584:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002588:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800258c:	fab3 f383 	clz	r3, r3
 8002590:	b2db      	uxtb	r3, r3
 8002592:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002596:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	461a      	mov	r2, r3
 800259e:	2301      	movs	r3, #1
 80025a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a2:	f7fe ff37 	bl	8001414 <HAL_GetTick>
 80025a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025aa:	e00a      	b.n	80025c2 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ac:	f7fe ff32 	bl	8001414 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d902      	bls.n	80025c2 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	f000 bdc8 	b.w	8003152 <HAL_RCC_OscConfig+0x100e>
 80025c2:	2302      	movs	r3, #2
 80025c4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80025cc:	fa93 f3a3 	rbit	r3, r3
 80025d0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80025d4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d8:	fab3 f383 	clz	r3, r3
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b3f      	cmp	r3, #63	@ 0x3f
 80025e0:	d802      	bhi.n	80025e8 <HAL_RCC_OscConfig+0x4a4>
 80025e2:	4b70      	ldr	r3, [pc, #448]	@ (80027a4 <HAL_RCC_OscConfig+0x660>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	e013      	b.n	8002610 <HAL_RCC_OscConfig+0x4cc>
 80025e8:	2302      	movs	r3, #2
 80025ea:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80025f2:	fa93 f3a3 	rbit	r3, r3
 80025f6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80025fa:	2302      	movs	r3, #2
 80025fc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002600:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002604:	fa93 f3a3 	rbit	r3, r3
 8002608:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800260c:	4b65      	ldr	r3, [pc, #404]	@ (80027a4 <HAL_RCC_OscConfig+0x660>)
 800260e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002610:	2202      	movs	r2, #2
 8002612:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002616:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800261a:	fa92 f2a2 	rbit	r2, r2
 800261e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002622:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002626:	fab2 f282 	clz	r2, r2
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	f042 0220 	orr.w	r2, r2, #32
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	f002 021f 	and.w	r2, r2, #31
 8002636:	2101      	movs	r1, #1
 8002638:	fa01 f202 	lsl.w	r2, r1, r2
 800263c:	4013      	ands	r3, r2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0b4      	beq.n	80025ac <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002642:	4b58      	ldr	r3, [pc, #352]	@ (80027a4 <HAL_RCC_OscConfig+0x660>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800264a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	21f8      	movs	r1, #248	@ 0xf8
 8002658:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002660:	fa91 f1a1 	rbit	r1, r1
 8002664:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002668:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800266c:	fab1 f181 	clz	r1, r1
 8002670:	b2c9      	uxtb	r1, r1
 8002672:	408b      	lsls	r3, r1
 8002674:	494b      	ldr	r1, [pc, #300]	@ (80027a4 <HAL_RCC_OscConfig+0x660>)
 8002676:	4313      	orrs	r3, r2
 8002678:	600b      	str	r3, [r1, #0]
 800267a:	e065      	b.n	8002748 <HAL_RCC_OscConfig+0x604>
 800267c:	2301      	movs	r3, #1
 800267e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002682:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800268e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800269c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	461a      	mov	r2, r3
 80026a4:	2300      	movs	r3, #0
 80026a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a8:	f7fe feb4 	bl	8001414 <HAL_GetTick>
 80026ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b0:	e00a      	b.n	80026c8 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026b2:	f7fe feaf 	bl	8001414 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d902      	bls.n	80026c8 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	f000 bd45 	b.w	8003152 <HAL_RCC_OscConfig+0x100e>
 80026c8:	2302      	movs	r3, #2
 80026ca:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80026d2:	fa93 f3a3 	rbit	r3, r3
 80026d6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80026da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026de:	fab3 f383 	clz	r3, r3
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80026e6:	d802      	bhi.n	80026ee <HAL_RCC_OscConfig+0x5aa>
 80026e8:	4b2e      	ldr	r3, [pc, #184]	@ (80027a4 <HAL_RCC_OscConfig+0x660>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	e013      	b.n	8002716 <HAL_RCC_OscConfig+0x5d2>
 80026ee:	2302      	movs	r3, #2
 80026f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80026f8:	fa93 f3a3 	rbit	r3, r3
 80026fc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002700:	2302      	movs	r3, #2
 8002702:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002706:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800270a:	fa93 f3a3 	rbit	r3, r3
 800270e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002712:	4b24      	ldr	r3, [pc, #144]	@ (80027a4 <HAL_RCC_OscConfig+0x660>)
 8002714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002716:	2202      	movs	r2, #2
 8002718:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800271c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002720:	fa92 f2a2 	rbit	r2, r2
 8002724:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002728:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800272c:	fab2 f282 	clz	r2, r2
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	f042 0220 	orr.w	r2, r2, #32
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	f002 021f 	and.w	r2, r2, #31
 800273c:	2101      	movs	r1, #1
 800273e:	fa01 f202 	lsl.w	r2, r1, r2
 8002742:	4013      	ands	r3, r2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1b4      	bne.n	80026b2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002748:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800274c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 8115 	beq.w	8002988 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800275e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002762:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d07e      	beq.n	800286c <HAL_RCC_OscConfig+0x728>
 800276e:	2301      	movs	r3, #1
 8002770:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002774:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002778:	fa93 f3a3 	rbit	r3, r3
 800277c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002780:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002784:	fab3 f383 	clz	r3, r3
 8002788:	b2db      	uxtb	r3, r3
 800278a:	461a      	mov	r2, r3
 800278c:	4b06      	ldr	r3, [pc, #24]	@ (80027a8 <HAL_RCC_OscConfig+0x664>)
 800278e:	4413      	add	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	461a      	mov	r2, r3
 8002794:	2301      	movs	r3, #1
 8002796:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002798:	f7fe fe3c 	bl	8001414 <HAL_GetTick>
 800279c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a0:	e00f      	b.n	80027c2 <HAL_RCC_OscConfig+0x67e>
 80027a2:	bf00      	nop
 80027a4:	40021000 	.word	0x40021000
 80027a8:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ac:	f7fe fe32 	bl	8001414 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d902      	bls.n	80027c2 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	f000 bcc8 	b.w	8003152 <HAL_RCC_OscConfig+0x100e>
 80027c2:	2302      	movs	r3, #2
 80027c4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80027cc:	fa93 f3a3 	rbit	r3, r3
 80027d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80027d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80027dc:	2202      	movs	r2, #2
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	fa93 f2a3 	rbit	r2, r3
 80027ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002800:	2202      	movs	r2, #2
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	fa93 f2a3 	rbit	r2, r3
 8002812:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002816:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800281a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800281c:	4bb0      	ldr	r3, [pc, #704]	@ (8002ae0 <HAL_RCC_OscConfig+0x99c>)
 800281e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002820:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002824:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002828:	2102      	movs	r1, #2
 800282a:	6019      	str	r1, [r3, #0]
 800282c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002830:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	fa93 f1a3 	rbit	r1, r3
 800283a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800283e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002842:	6019      	str	r1, [r3, #0]
  return result;
 8002844:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002848:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	fab3 f383 	clz	r3, r3
 8002852:	b2db      	uxtb	r3, r3
 8002854:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002858:	b2db      	uxtb	r3, r3
 800285a:	f003 031f 	and.w	r3, r3, #31
 800285e:	2101      	movs	r1, #1
 8002860:	fa01 f303 	lsl.w	r3, r1, r3
 8002864:	4013      	ands	r3, r2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0a0      	beq.n	80027ac <HAL_RCC_OscConfig+0x668>
 800286a:	e08d      	b.n	8002988 <HAL_RCC_OscConfig+0x844>
 800286c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002870:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002874:	2201      	movs	r2, #1
 8002876:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800287c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	fa93 f2a3 	rbit	r2, r3
 8002886:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800288a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800288e:	601a      	str	r2, [r3, #0]
  return result;
 8002890:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002894:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002898:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800289a:	fab3 f383 	clz	r3, r3
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	461a      	mov	r2, r3
 80028a2:	4b90      	ldr	r3, [pc, #576]	@ (8002ae4 <HAL_RCC_OscConfig+0x9a0>)
 80028a4:	4413      	add	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	461a      	mov	r2, r3
 80028aa:	2300      	movs	r3, #0
 80028ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ae:	f7fe fdb1 	bl	8001414 <HAL_GetTick>
 80028b2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b6:	e00a      	b.n	80028ce <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b8:	f7fe fdac 	bl	8001414 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d902      	bls.n	80028ce <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	f000 bc42 	b.w	8003152 <HAL_RCC_OscConfig+0x100e>
 80028ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80028d6:	2202      	movs	r2, #2
 80028d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028de:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	fa93 f2a3 	rbit	r2, r3
 80028e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80028fa:	2202      	movs	r2, #2
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002902:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	fa93 f2a3 	rbit	r2, r3
 800290c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002910:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800291e:	2202      	movs	r2, #2
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002926:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	fa93 f2a3 	rbit	r2, r3
 8002930:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002934:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002938:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800293a:	4b69      	ldr	r3, [pc, #420]	@ (8002ae0 <HAL_RCC_OscConfig+0x99c>)
 800293c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800293e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002942:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002946:	2102      	movs	r1, #2
 8002948:	6019      	str	r1, [r3, #0]
 800294a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	fa93 f1a3 	rbit	r1, r3
 8002958:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800295c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002960:	6019      	str	r1, [r3, #0]
  return result;
 8002962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002966:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	fab3 f383 	clz	r3, r3
 8002970:	b2db      	uxtb	r3, r3
 8002972:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002976:	b2db      	uxtb	r3, r3
 8002978:	f003 031f 	and.w	r3, r3, #31
 800297c:	2101      	movs	r1, #1
 800297e:	fa01 f303 	lsl.w	r3, r1, r3
 8002982:	4013      	ands	r3, r2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d197      	bne.n	80028b8 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002988:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 819e 	beq.w	8002cda <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 800299e:	2300      	movs	r3, #0
 80029a0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029a4:	4b4e      	ldr	r3, [pc, #312]	@ (8002ae0 <HAL_RCC_OscConfig+0x99c>)
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d116      	bne.n	80029de <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029b0:	4b4b      	ldr	r3, [pc, #300]	@ (8002ae0 <HAL_RCC_OscConfig+0x99c>)
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	4a4a      	ldr	r2, [pc, #296]	@ (8002ae0 <HAL_RCC_OscConfig+0x99c>)
 80029b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029ba:	61d3      	str	r3, [r2, #28]
 80029bc:	4b48      	ldr	r3, [pc, #288]	@ (8002ae0 <HAL_RCC_OscConfig+0x99c>)
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80029c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80029d6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80029d8:	2301      	movs	r3, #1
 80029da:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029de:	4b42      	ldr	r3, [pc, #264]	@ (8002ae8 <HAL_RCC_OscConfig+0x9a4>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d11a      	bne.n	8002a20 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ea:	4b3f      	ldr	r3, [pc, #252]	@ (8002ae8 <HAL_RCC_OscConfig+0x9a4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a3e      	ldr	r2, [pc, #248]	@ (8002ae8 <HAL_RCC_OscConfig+0x9a4>)
 80029f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029f6:	f7fe fd0d 	bl	8001414 <HAL_GetTick>
 80029fa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fe:	e009      	b.n	8002a14 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a00:	f7fe fd08 	bl	8001414 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b64      	cmp	r3, #100	@ 0x64
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e39e      	b.n	8003152 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a14:	4b34      	ldr	r3, [pc, #208]	@ (8002ae8 <HAL_RCC_OscConfig+0x9a4>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0ef      	beq.n	8002a00 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d106      	bne.n	8002a3e <HAL_RCC_OscConfig+0x8fa>
 8002a30:	4b2b      	ldr	r3, [pc, #172]	@ (8002ae0 <HAL_RCC_OscConfig+0x99c>)
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	4a2a      	ldr	r2, [pc, #168]	@ (8002ae0 <HAL_RCC_OscConfig+0x99c>)
 8002a36:	f043 0301 	orr.w	r3, r3, #1
 8002a3a:	6213      	str	r3, [r2, #32]
 8002a3c:	e035      	b.n	8002aaa <HAL_RCC_OscConfig+0x966>
 8002a3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10c      	bne.n	8002a68 <HAL_RCC_OscConfig+0x924>
 8002a4e:	4b24      	ldr	r3, [pc, #144]	@ (8002ae0 <HAL_RCC_OscConfig+0x99c>)
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	4a23      	ldr	r2, [pc, #140]	@ (8002ae0 <HAL_RCC_OscConfig+0x99c>)
 8002a54:	f023 0301 	bic.w	r3, r3, #1
 8002a58:	6213      	str	r3, [r2, #32]
 8002a5a:	4b21      	ldr	r3, [pc, #132]	@ (8002ae0 <HAL_RCC_OscConfig+0x99c>)
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	4a20      	ldr	r2, [pc, #128]	@ (8002ae0 <HAL_RCC_OscConfig+0x99c>)
 8002a60:	f023 0304 	bic.w	r3, r3, #4
 8002a64:	6213      	str	r3, [r2, #32]
 8002a66:	e020      	b.n	8002aaa <HAL_RCC_OscConfig+0x966>
 8002a68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a6c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	2b05      	cmp	r3, #5
 8002a76:	d10c      	bne.n	8002a92 <HAL_RCC_OscConfig+0x94e>
 8002a78:	4b19      	ldr	r3, [pc, #100]	@ (8002ae0 <HAL_RCC_OscConfig+0x99c>)
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	4a18      	ldr	r2, [pc, #96]	@ (8002ae0 <HAL_RCC_OscConfig+0x99c>)
 8002a7e:	f043 0304 	orr.w	r3, r3, #4
 8002a82:	6213      	str	r3, [r2, #32]
 8002a84:	4b16      	ldr	r3, [pc, #88]	@ (8002ae0 <HAL_RCC_OscConfig+0x99c>)
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	4a15      	ldr	r2, [pc, #84]	@ (8002ae0 <HAL_RCC_OscConfig+0x99c>)
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	6213      	str	r3, [r2, #32]
 8002a90:	e00b      	b.n	8002aaa <HAL_RCC_OscConfig+0x966>
 8002a92:	4b13      	ldr	r3, [pc, #76]	@ (8002ae0 <HAL_RCC_OscConfig+0x99c>)
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	4a12      	ldr	r2, [pc, #72]	@ (8002ae0 <HAL_RCC_OscConfig+0x99c>)
 8002a98:	f023 0301 	bic.w	r3, r3, #1
 8002a9c:	6213      	str	r3, [r2, #32]
 8002a9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ae0 <HAL_RCC_OscConfig+0x99c>)
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	4a0f      	ldr	r2, [pc, #60]	@ (8002ae0 <HAL_RCC_OscConfig+0x99c>)
 8002aa4:	f023 0304 	bic.w	r3, r3, #4
 8002aa8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 8087 	beq.w	8002bca <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002abc:	f7fe fcaa 	bl	8001414 <HAL_GetTick>
 8002ac0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac4:	e012      	b.n	8002aec <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac6:	f7fe fca5 	bl	8001414 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d908      	bls.n	8002aec <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e339      	b.n	8003152 <HAL_RCC_OscConfig+0x100e>
 8002ade:	bf00      	nop
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	10908120 	.word	0x10908120
 8002ae8:	40007000 	.word	0x40007000
 8002aec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002af4:	2202      	movs	r2, #2
 8002af6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	fa93 f2a3 	rbit	r2, r3
 8002b06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b0a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b14:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002b18:	2202      	movs	r2, #2
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b20:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	fa93 f2a3 	rbit	r2, r3
 8002b2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b2e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002b32:	601a      	str	r2, [r3, #0]
  return result;
 8002b34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b38:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002b3c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3e:	fab3 f383 	clz	r3, r3
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d102      	bne.n	8002b54 <HAL_RCC_OscConfig+0xa10>
 8002b4e:	4b98      	ldr	r3, [pc, #608]	@ (8002db0 <HAL_RCC_OscConfig+0xc6c>)
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	e013      	b.n	8002b7c <HAL_RCC_OscConfig+0xa38>
 8002b54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b58:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b64:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	fa93 f2a3 	rbit	r2, r3
 8002b6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b72:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	4b8d      	ldr	r3, [pc, #564]	@ (8002db0 <HAL_RCC_OscConfig+0xc6c>)
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b80:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002b84:	2102      	movs	r1, #2
 8002b86:	6011      	str	r1, [r2, #0]
 8002b88:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b8c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	fa92 f1a2 	rbit	r1, r2
 8002b96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b9a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002b9e:	6011      	str	r1, [r2, #0]
  return result;
 8002ba0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ba4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	fab2 f282 	clz	r2, r2
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	f002 021f 	and.w	r2, r2, #31
 8002bba:	2101      	movs	r1, #1
 8002bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f43f af7f 	beq.w	8002ac6 <HAL_RCC_OscConfig+0x982>
 8002bc8:	e07d      	b.n	8002cc6 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bca:	f7fe fc23 	bl	8001414 <HAL_GetTick>
 8002bce:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd2:	e00b      	b.n	8002bec <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd4:	f7fe fc1e 	bl	8001414 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e2b2      	b.n	8003152 <HAL_RCC_OscConfig+0x100e>
 8002bec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bfc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	fa93 f2a3 	rbit	r2, r3
 8002c06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c0a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c14:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002c18:	2202      	movs	r2, #2
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c20:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	fa93 f2a3 	rbit	r2, r3
 8002c2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c2e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002c32:	601a      	str	r2, [r3, #0]
  return result;
 8002c34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c38:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002c3c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c3e:	fab3 f383 	clz	r3, r3
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d102      	bne.n	8002c54 <HAL_RCC_OscConfig+0xb10>
 8002c4e:	4b58      	ldr	r3, [pc, #352]	@ (8002db0 <HAL_RCC_OscConfig+0xc6c>)
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	e013      	b.n	8002c7c <HAL_RCC_OscConfig+0xb38>
 8002c54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c58:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c64:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	fa93 f2a3 	rbit	r2, r3
 8002c6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c72:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	4b4d      	ldr	r3, [pc, #308]	@ (8002db0 <HAL_RCC_OscConfig+0xc6c>)
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c80:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002c84:	2102      	movs	r1, #2
 8002c86:	6011      	str	r1, [r2, #0]
 8002c88:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c8c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002c90:	6812      	ldr	r2, [r2, #0]
 8002c92:	fa92 f1a2 	rbit	r1, r2
 8002c96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c9a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002c9e:	6011      	str	r1, [r2, #0]
  return result;
 8002ca0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ca4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002ca8:	6812      	ldr	r2, [r2, #0]
 8002caa:	fab2 f282 	clz	r2, r2
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	f002 021f 	and.w	r2, r2, #31
 8002cba:	2101      	movs	r1, #1
 8002cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d186      	bne.n	8002bd4 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cc6:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d105      	bne.n	8002cda <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cce:	4b38      	ldr	r3, [pc, #224]	@ (8002db0 <HAL_RCC_OscConfig+0xc6c>)
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	4a37      	ldr	r2, [pc, #220]	@ (8002db0 <HAL_RCC_OscConfig+0xc6c>)
 8002cd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cd8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cde:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 8232 	beq.w	8003150 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cec:	4b30      	ldr	r3, [pc, #192]	@ (8002db0 <HAL_RCC_OscConfig+0xc6c>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 030c 	and.w	r3, r3, #12
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	f000 8201 	beq.w	80030fc <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cfe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	f040 8157 	bne.w	8002fba <HAL_RCC_OscConfig+0xe76>
 8002d0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d10:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002d14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d1e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	fa93 f2a3 	rbit	r2, r3
 8002d28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d2c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002d30:	601a      	str	r2, [r3, #0]
  return result;
 8002d32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d36:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002d3a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3c:	fab3 f383 	clz	r3, r3
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d46:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	2300      	movs	r3, #0
 8002d50:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d52:	f7fe fb5f 	bl	8001414 <HAL_GetTick>
 8002d56:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d5a:	e009      	b.n	8002d70 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d5c:	f7fe fb5a 	bl	8001414 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e1f0      	b.n	8003152 <HAL_RCC_OscConfig+0x100e>
 8002d70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d74:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002d78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d82:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	fa93 f2a3 	rbit	r2, r3
 8002d8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d90:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002d94:	601a      	str	r2, [r3, #0]
  return result;
 8002d96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d9a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002d9e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002da0:	fab3 f383 	clz	r3, r3
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b3f      	cmp	r3, #63	@ 0x3f
 8002da8:	d804      	bhi.n	8002db4 <HAL_RCC_OscConfig+0xc70>
 8002daa:	4b01      	ldr	r3, [pc, #4]	@ (8002db0 <HAL_RCC_OscConfig+0xc6c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	e029      	b.n	8002e04 <HAL_RCC_OscConfig+0xcc0>
 8002db0:	40021000 	.word	0x40021000
 8002db4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002dbc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002dc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	fa93 f2a3 	rbit	r2, r3
 8002dd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dde:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002de2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dec:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	fa93 f2a3 	rbit	r2, r3
 8002df6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dfa:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	4bc3      	ldr	r3, [pc, #780]	@ (8003110 <HAL_RCC_OscConfig+0xfcc>)
 8002e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e04:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e08:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002e0c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002e10:	6011      	str	r1, [r2, #0]
 8002e12:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e16:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002e1a:	6812      	ldr	r2, [r2, #0]
 8002e1c:	fa92 f1a2 	rbit	r1, r2
 8002e20:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e24:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002e28:	6011      	str	r1, [r2, #0]
  return result;
 8002e2a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e2e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	fab2 f282 	clz	r2, r2
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	f042 0220 	orr.w	r2, r2, #32
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	f002 021f 	and.w	r2, r2, #31
 8002e44:	2101      	movs	r1, #1
 8002e46:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d185      	bne.n	8002d5c <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e50:	4baf      	ldr	r3, [pc, #700]	@ (8003110 <HAL_RCC_OscConfig+0xfcc>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e5c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002e64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e68:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	430b      	orrs	r3, r1
 8002e72:	49a7      	ldr	r1, [pc, #668]	@ (8003110 <HAL_RCC_OscConfig+0xfcc>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	604b      	str	r3, [r1, #4]
 8002e78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e7c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002e80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e8a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	fa93 f2a3 	rbit	r2, r3
 8002e94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e98:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002e9c:	601a      	str	r2, [r3, #0]
  return result;
 8002e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ea2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002ea6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ea8:	fab3 f383 	clz	r3, r3
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002eb2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2301      	movs	r3, #1
 8002ebc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ebe:	f7fe faa9 	bl	8001414 <HAL_GetTick>
 8002ec2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ec6:	e009      	b.n	8002edc <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ec8:	f7fe faa4 	bl	8001414 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e13a      	b.n	8003152 <HAL_RCC_OscConfig+0x100e>
 8002edc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002ee4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ee8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eee:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	fa93 f2a3 	rbit	r2, r3
 8002ef8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002f00:	601a      	str	r2, [r3, #0]
  return result;
 8002f02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f06:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002f0a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f0c:	fab3 f383 	clz	r3, r3
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f14:	d802      	bhi.n	8002f1c <HAL_RCC_OscConfig+0xdd8>
 8002f16:	4b7e      	ldr	r3, [pc, #504]	@ (8003110 <HAL_RCC_OscConfig+0xfcc>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	e027      	b.n	8002f6c <HAL_RCC_OscConfig+0xe28>
 8002f1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f20:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002f24:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f2e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	fa93 f2a3 	rbit	r2, r3
 8002f38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f3c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f46:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002f4a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f54:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	fa93 f2a3 	rbit	r2, r3
 8002f5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f62:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	4b69      	ldr	r3, [pc, #420]	@ (8003110 <HAL_RCC_OscConfig+0xfcc>)
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f70:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002f74:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002f78:	6011      	str	r1, [r2, #0]
 8002f7a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f7e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	fa92 f1a2 	rbit	r1, r2
 8002f88:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f8c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002f90:	6011      	str	r1, [r2, #0]
  return result;
 8002f92:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f96:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002f9a:	6812      	ldr	r2, [r2, #0]
 8002f9c:	fab2 f282 	clz	r2, r2
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	f042 0220 	orr.w	r2, r2, #32
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	f002 021f 	and.w	r2, r2, #31
 8002fac:	2101      	movs	r1, #1
 8002fae:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d087      	beq.n	8002ec8 <HAL_RCC_OscConfig+0xd84>
 8002fb8:	e0ca      	b.n	8003150 <HAL_RCC_OscConfig+0x100c>
 8002fba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fbe:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002fc2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002fc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fcc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	fa93 f2a3 	rbit	r2, r3
 8002fd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fda:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002fde:	601a      	str	r2, [r3, #0]
  return result;
 8002fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002fe8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fea:	fab3 f383 	clz	r3, r3
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ff4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003000:	f7fe fa08 	bl	8001414 <HAL_GetTick>
 8003004:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003008:	e009      	b.n	800301e <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800300a:	f7fe fa03 	bl	8001414 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e099      	b.n	8003152 <HAL_RCC_OscConfig+0x100e>
 800301e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003022:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003026:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800302a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003030:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	fa93 f2a3 	rbit	r2, r3
 800303a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800303e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003042:	601a      	str	r2, [r3, #0]
  return result;
 8003044:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003048:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800304c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800304e:	fab3 f383 	clz	r3, r3
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b3f      	cmp	r3, #63	@ 0x3f
 8003056:	d802      	bhi.n	800305e <HAL_RCC_OscConfig+0xf1a>
 8003058:	4b2d      	ldr	r3, [pc, #180]	@ (8003110 <HAL_RCC_OscConfig+0xfcc>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	e027      	b.n	80030ae <HAL_RCC_OscConfig+0xf6a>
 800305e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003062:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003066:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800306a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003070:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	fa93 f2a3 	rbit	r2, r3
 800307a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800307e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003088:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800308c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003096:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	fa93 f2a3 	rbit	r2, r3
 80030a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	4b19      	ldr	r3, [pc, #100]	@ (8003110 <HAL_RCC_OscConfig+0xfcc>)
 80030ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030b2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80030b6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80030ba:	6011      	str	r1, [r2, #0]
 80030bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030c0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80030c4:	6812      	ldr	r2, [r2, #0]
 80030c6:	fa92 f1a2 	rbit	r1, r2
 80030ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030ce:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80030d2:	6011      	str	r1, [r2, #0]
  return result;
 80030d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030d8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80030dc:	6812      	ldr	r2, [r2, #0]
 80030de:	fab2 f282 	clz	r2, r2
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	f042 0220 	orr.w	r2, r2, #32
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	f002 021f 	and.w	r2, r2, #31
 80030ee:	2101      	movs	r1, #1
 80030f0:	fa01 f202 	lsl.w	r2, r1, r2
 80030f4:	4013      	ands	r3, r2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d187      	bne.n	800300a <HAL_RCC_OscConfig+0xec6>
 80030fa:	e029      	b.n	8003150 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003100:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d103      	bne.n	8003114 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e020      	b.n	8003152 <HAL_RCC_OscConfig+0x100e>
 8003110:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003114:	4b11      	ldr	r3, [pc, #68]	@ (800315c <HAL_RCC_OscConfig+0x1018>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800311c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003120:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003124:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003128:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	429a      	cmp	r2, r3
 8003132:	d10b      	bne.n	800314c <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003134:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003138:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800313c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003140:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e000      	b.n	8003152 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40021000 	.word	0x40021000

08003160 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b09e      	sub	sp, #120	@ 0x78
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800316a:	2300      	movs	r3, #0
 800316c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e154      	b.n	8003422 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003178:	4b89      	ldr	r3, [pc, #548]	@ (80033a0 <HAL_RCC_ClockConfig+0x240>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d910      	bls.n	80031a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003186:	4b86      	ldr	r3, [pc, #536]	@ (80033a0 <HAL_RCC_ClockConfig+0x240>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f023 0207 	bic.w	r2, r3, #7
 800318e:	4984      	ldr	r1, [pc, #528]	@ (80033a0 <HAL_RCC_ClockConfig+0x240>)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	4313      	orrs	r3, r2
 8003194:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003196:	4b82      	ldr	r3, [pc, #520]	@ (80033a0 <HAL_RCC_ClockConfig+0x240>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d001      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e13c      	b.n	8003422 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d008      	beq.n	80031c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b4:	4b7b      	ldr	r3, [pc, #492]	@ (80033a4 <HAL_RCC_ClockConfig+0x244>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	4978      	ldr	r1, [pc, #480]	@ (80033a4 <HAL_RCC_ClockConfig+0x244>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 80cd 	beq.w	800336e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d137      	bne.n	800324c <HAL_RCC_ClockConfig+0xec>
 80031dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031e4:	fa93 f3a3 	rbit	r3, r3
 80031e8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80031ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ec:	fab3 f383 	clz	r3, r3
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80031f4:	d802      	bhi.n	80031fc <HAL_RCC_ClockConfig+0x9c>
 80031f6:	4b6b      	ldr	r3, [pc, #428]	@ (80033a4 <HAL_RCC_ClockConfig+0x244>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	e00f      	b.n	800321c <HAL_RCC_ClockConfig+0xbc>
 80031fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003200:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003204:	fa93 f3a3 	rbit	r3, r3
 8003208:	667b      	str	r3, [r7, #100]	@ 0x64
 800320a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800320e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003210:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003212:	fa93 f3a3 	rbit	r3, r3
 8003216:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003218:	4b62      	ldr	r3, [pc, #392]	@ (80033a4 <HAL_RCC_ClockConfig+0x244>)
 800321a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003220:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003222:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003224:	fa92 f2a2 	rbit	r2, r2
 8003228:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800322a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800322c:	fab2 f282 	clz	r2, r2
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	f042 0220 	orr.w	r2, r2, #32
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	f002 021f 	and.w	r2, r2, #31
 800323c:	2101      	movs	r1, #1
 800323e:	fa01 f202 	lsl.w	r2, r1, r2
 8003242:	4013      	ands	r3, r2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d171      	bne.n	800332c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e0ea      	b.n	8003422 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b02      	cmp	r3, #2
 8003252:	d137      	bne.n	80032c4 <HAL_RCC_ClockConfig+0x164>
 8003254:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003258:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800325c:	fa93 f3a3 	rbit	r3, r3
 8003260:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003262:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003264:	fab3 f383 	clz	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b3f      	cmp	r3, #63	@ 0x3f
 800326c:	d802      	bhi.n	8003274 <HAL_RCC_ClockConfig+0x114>
 800326e:	4b4d      	ldr	r3, [pc, #308]	@ (80033a4 <HAL_RCC_ClockConfig+0x244>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	e00f      	b.n	8003294 <HAL_RCC_ClockConfig+0x134>
 8003274:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003278:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800327c:	fa93 f3a3 	rbit	r3, r3
 8003280:	647b      	str	r3, [r7, #68]	@ 0x44
 8003282:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003286:	643b      	str	r3, [r7, #64]	@ 0x40
 8003288:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800328a:	fa93 f3a3 	rbit	r3, r3
 800328e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003290:	4b44      	ldr	r3, [pc, #272]	@ (80033a4 <HAL_RCC_ClockConfig+0x244>)
 8003292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003294:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003298:	63ba      	str	r2, [r7, #56]	@ 0x38
 800329a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800329c:	fa92 f2a2 	rbit	r2, r2
 80032a0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80032a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80032a4:	fab2 f282 	clz	r2, r2
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	f042 0220 	orr.w	r2, r2, #32
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	f002 021f 	and.w	r2, r2, #31
 80032b4:	2101      	movs	r1, #1
 80032b6:	fa01 f202 	lsl.w	r2, r1, r2
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d135      	bne.n	800332c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e0ae      	b.n	8003422 <HAL_RCC_ClockConfig+0x2c2>
 80032c4:	2302      	movs	r3, #2
 80032c6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ca:	fa93 f3a3 	rbit	r3, r3
 80032ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80032d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d2:	fab3 f383 	clz	r3, r3
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b3f      	cmp	r3, #63	@ 0x3f
 80032da:	d802      	bhi.n	80032e2 <HAL_RCC_ClockConfig+0x182>
 80032dc:	4b31      	ldr	r3, [pc, #196]	@ (80033a4 <HAL_RCC_ClockConfig+0x244>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	e00d      	b.n	80032fe <HAL_RCC_ClockConfig+0x19e>
 80032e2:	2302      	movs	r3, #2
 80032e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e8:	fa93 f3a3 	rbit	r3, r3
 80032ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80032ee:	2302      	movs	r3, #2
 80032f0:	623b      	str	r3, [r7, #32]
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	fa93 f3a3 	rbit	r3, r3
 80032f8:	61fb      	str	r3, [r7, #28]
 80032fa:	4b2a      	ldr	r3, [pc, #168]	@ (80033a4 <HAL_RCC_ClockConfig+0x244>)
 80032fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fe:	2202      	movs	r2, #2
 8003300:	61ba      	str	r2, [r7, #24]
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	fa92 f2a2 	rbit	r2, r2
 8003308:	617a      	str	r2, [r7, #20]
  return result;
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	fab2 f282 	clz	r2, r2
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	f042 0220 	orr.w	r2, r2, #32
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	f002 021f 	and.w	r2, r2, #31
 800331c:	2101      	movs	r1, #1
 800331e:	fa01 f202 	lsl.w	r2, r1, r2
 8003322:	4013      	ands	r3, r2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e07a      	b.n	8003422 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800332c:	4b1d      	ldr	r3, [pc, #116]	@ (80033a4 <HAL_RCC_ClockConfig+0x244>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f023 0203 	bic.w	r2, r3, #3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	491a      	ldr	r1, [pc, #104]	@ (80033a4 <HAL_RCC_ClockConfig+0x244>)
 800333a:	4313      	orrs	r3, r2
 800333c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800333e:	f7fe f869 	bl	8001414 <HAL_GetTick>
 8003342:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003344:	e00a      	b.n	800335c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003346:	f7fe f865 	bl	8001414 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003354:	4293      	cmp	r3, r2
 8003356:	d901      	bls.n	800335c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e062      	b.n	8003422 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335c:	4b11      	ldr	r3, [pc, #68]	@ (80033a4 <HAL_RCC_ClockConfig+0x244>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 020c 	and.w	r2, r3, #12
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	429a      	cmp	r2, r3
 800336c:	d1eb      	bne.n	8003346 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800336e:	4b0c      	ldr	r3, [pc, #48]	@ (80033a0 <HAL_RCC_ClockConfig+0x240>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d215      	bcs.n	80033a8 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337c:	4b08      	ldr	r3, [pc, #32]	@ (80033a0 <HAL_RCC_ClockConfig+0x240>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f023 0207 	bic.w	r2, r3, #7
 8003384:	4906      	ldr	r1, [pc, #24]	@ (80033a0 <HAL_RCC_ClockConfig+0x240>)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	4313      	orrs	r3, r2
 800338a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800338c:	4b04      	ldr	r3, [pc, #16]	@ (80033a0 <HAL_RCC_ClockConfig+0x240>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	429a      	cmp	r2, r3
 8003398:	d006      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e041      	b.n	8003422 <HAL_RCC_ClockConfig+0x2c2>
 800339e:	bf00      	nop
 80033a0:	40022000 	.word	0x40022000
 80033a4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033b4:	4b1d      	ldr	r3, [pc, #116]	@ (800342c <HAL_RCC_ClockConfig+0x2cc>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	491a      	ldr	r1, [pc, #104]	@ (800342c <HAL_RCC_ClockConfig+0x2cc>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d009      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033d2:	4b16      	ldr	r3, [pc, #88]	@ (800342c <HAL_RCC_ClockConfig+0x2cc>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	4912      	ldr	r1, [pc, #72]	@ (800342c <HAL_RCC_ClockConfig+0x2cc>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80033e6:	f000 f829 	bl	800343c <HAL_RCC_GetSysClockFreq>
 80033ea:	4601      	mov	r1, r0
 80033ec:	4b0f      	ldr	r3, [pc, #60]	@ (800342c <HAL_RCC_ClockConfig+0x2cc>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033f4:	22f0      	movs	r2, #240	@ 0xf0
 80033f6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	fa92 f2a2 	rbit	r2, r2
 80033fe:	60fa      	str	r2, [r7, #12]
  return result;
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	fab2 f282 	clz	r2, r2
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	40d3      	lsrs	r3, r2
 800340a:	4a09      	ldr	r2, [pc, #36]	@ (8003430 <HAL_RCC_ClockConfig+0x2d0>)
 800340c:	5cd3      	ldrb	r3, [r2, r3]
 800340e:	fa21 f303 	lsr.w	r3, r1, r3
 8003412:	4a08      	ldr	r2, [pc, #32]	@ (8003434 <HAL_RCC_ClockConfig+0x2d4>)
 8003414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003416:	4b08      	ldr	r3, [pc, #32]	@ (8003438 <HAL_RCC_ClockConfig+0x2d8>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f7fd ffb6 	bl	800138c <HAL_InitTick>
  
  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3778      	adds	r7, #120	@ 0x78
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40021000 	.word	0x40021000
 8003430:	08005da0 	.word	0x08005da0
 8003434:	20000004 	.word	0x20000004
 8003438:	20000008 	.word	0x20000008

0800343c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800343c:	b480      	push	{r7}
 800343e:	b087      	sub	sp, #28
 8003440:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003442:	2300      	movs	r3, #0
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	2300      	movs	r3, #0
 8003448:	60bb      	str	r3, [r7, #8]
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	2300      	movs	r3, #0
 8003450:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003452:	2300      	movs	r3, #0
 8003454:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003456:	4b1e      	ldr	r3, [pc, #120]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f003 030c 	and.w	r3, r3, #12
 8003462:	2b04      	cmp	r3, #4
 8003464:	d002      	beq.n	800346c <HAL_RCC_GetSysClockFreq+0x30>
 8003466:	2b08      	cmp	r3, #8
 8003468:	d003      	beq.n	8003472 <HAL_RCC_GetSysClockFreq+0x36>
 800346a:	e026      	b.n	80034ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800346c:	4b19      	ldr	r3, [pc, #100]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800346e:	613b      	str	r3, [r7, #16]
      break;
 8003470:	e026      	b.n	80034c0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	0c9b      	lsrs	r3, r3, #18
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	4a17      	ldr	r2, [pc, #92]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800347c:	5cd3      	ldrb	r3, [r2, r3]
 800347e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003480:	4b13      	ldr	r3, [pc, #76]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	4a14      	ldr	r2, [pc, #80]	@ (80034dc <HAL_RCC_GetSysClockFreq+0xa0>)
 800348a:	5cd3      	ldrb	r3, [r2, r3]
 800348c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003498:	4a0e      	ldr	r2, [pc, #56]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	fbb2 f2f3 	udiv	r2, r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	fb02 f303 	mul.w	r3, r2, r3
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	e004      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a0c      	ldr	r2, [pc, #48]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80034ae:	fb02 f303 	mul.w	r3, r2, r3
 80034b2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	613b      	str	r3, [r7, #16]
      break;
 80034b8:	e002      	b.n	80034c0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034ba:	4b06      	ldr	r3, [pc, #24]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80034bc:	613b      	str	r3, [r7, #16]
      break;
 80034be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034c0:	693b      	ldr	r3, [r7, #16]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	371c      	adds	r7, #28
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40021000 	.word	0x40021000
 80034d4:	007a1200 	.word	0x007a1200
 80034d8:	08005db8 	.word	0x08005db8
 80034dc:	08005dc8 	.word	0x08005dc8
 80034e0:	003d0900 	.word	0x003d0900

080034e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034e8:	4b03      	ldr	r3, [pc, #12]	@ (80034f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034ea:	681b      	ldr	r3, [r3, #0]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	20000004 	.word	0x20000004

080034fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003502:	f7ff ffef 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 8003506:	4601      	mov	r1, r0
 8003508:	4b0b      	ldr	r3, [pc, #44]	@ (8003538 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003510:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003514:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	fa92 f2a2 	rbit	r2, r2
 800351c:	603a      	str	r2, [r7, #0]
  return result;
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	fab2 f282 	clz	r2, r2
 8003524:	b2d2      	uxtb	r2, r2
 8003526:	40d3      	lsrs	r3, r2
 8003528:	4a04      	ldr	r2, [pc, #16]	@ (800353c <HAL_RCC_GetPCLK1Freq+0x40>)
 800352a:	5cd3      	ldrb	r3, [r2, r3]
 800352c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003530:	4618      	mov	r0, r3
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40021000 	.word	0x40021000
 800353c:	08005db0 	.word	0x08005db0

08003540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003546:	f7ff ffcd 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 800354a:	4601      	mov	r1, r0
 800354c:	4b0b      	ldr	r3, [pc, #44]	@ (800357c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003554:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003558:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	fa92 f2a2 	rbit	r2, r2
 8003560:	603a      	str	r2, [r7, #0]
  return result;
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	fab2 f282 	clz	r2, r2
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	40d3      	lsrs	r3, r2
 800356c:	4a04      	ldr	r2, [pc, #16]	@ (8003580 <HAL_RCC_GetPCLK2Freq+0x40>)
 800356e:	5cd3      	ldrb	r3, [r2, r3]
 8003570:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003574:	4618      	mov	r0, r3
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40021000 	.word	0x40021000
 8003580:	08005db0 	.word	0x08005db0

08003584 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b092      	sub	sp, #72	@ 0x48
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800358c:	2300      	movs	r3, #0
 800358e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003594:	2300      	movs	r3, #0
 8003596:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 80d2 	beq.w	800374c <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035a8:	4b4d      	ldr	r3, [pc, #308]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10e      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b4:	4b4a      	ldr	r3, [pc, #296]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	4a49      	ldr	r2, [pc, #292]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80035ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035be:	61d3      	str	r3, [r2, #28]
 80035c0:	4b47      	ldr	r3, [pc, #284]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035c8:	60bb      	str	r3, [r7, #8]
 80035ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035cc:	2301      	movs	r3, #1
 80035ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d2:	4b44      	ldr	r3, [pc, #272]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d118      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035de:	4b41      	ldr	r3, [pc, #260]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a40      	ldr	r2, [pc, #256]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ea:	f7fd ff13 	bl	8001414 <HAL_GetTick>
 80035ee:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f0:	e008      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f2:	f7fd ff0f 	bl	8001414 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b64      	cmp	r3, #100	@ 0x64
 80035fe:	d901      	bls.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e167      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003604:	4b37      	ldr	r3, [pc, #220]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0f0      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003610:	4b33      	ldr	r3, [pc, #204]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003618:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800361a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 8082 	beq.w	8003726 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800362a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800362c:	429a      	cmp	r2, r3
 800362e:	d07a      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003630:	4b2b      	ldr	r3, [pc, #172]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003638:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800363a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800363e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003642:	fa93 f3a3 	rbit	r3, r3
 8003646:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800364a:	fab3 f383 	clz	r3, r3
 800364e:	b2db      	uxtb	r3, r3
 8003650:	461a      	mov	r2, r3
 8003652:	4b25      	ldr	r3, [pc, #148]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	461a      	mov	r2, r3
 800365a:	2301      	movs	r3, #1
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003662:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003666:	fa93 f3a3 	rbit	r3, r3
 800366a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800366c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800366e:	fab3 f383 	clz	r3, r3
 8003672:	b2db      	uxtb	r3, r3
 8003674:	461a      	mov	r2, r3
 8003676:	4b1c      	ldr	r3, [pc, #112]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	461a      	mov	r2, r3
 800367e:	2300      	movs	r3, #0
 8003680:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003682:	4a17      	ldr	r2, [pc, #92]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003686:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d049      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003692:	f7fd febf 	bl	8001414 <HAL_GetTick>
 8003696:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003698:	e00a      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800369a:	f7fd febb 	bl	8001414 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e111      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 80036b0:	2302      	movs	r3, #2
 80036b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b6:	fa93 f3a3 	rbit	r3, r3
 80036ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80036bc:	2302      	movs	r3, #2
 80036be:	623b      	str	r3, [r7, #32]
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	fa93 f3a3 	rbit	r3, r3
 80036c6:	61fb      	str	r3, [r7, #28]
  return result;
 80036c8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ca:	fab3 f383 	clz	r3, r3
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d108      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x168>
 80036da:	4b01      	ldr	r3, [pc, #4]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	e00d      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x178>
 80036e0:	40021000 	.word	0x40021000
 80036e4:	40007000 	.word	0x40007000
 80036e8:	10908100 	.word	0x10908100
 80036ec:	2302      	movs	r3, #2
 80036ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	fa93 f3a3 	rbit	r3, r3
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	4b78      	ldr	r3, [pc, #480]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80036fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fc:	2202      	movs	r2, #2
 80036fe:	613a      	str	r2, [r7, #16]
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	fa92 f2a2 	rbit	r2, r2
 8003706:	60fa      	str	r2, [r7, #12]
  return result;
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	fab2 f282 	clz	r2, r2
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	f002 021f 	and.w	r2, r2, #31
 800371a:	2101      	movs	r1, #1
 800371c:	fa01 f202 	lsl.w	r2, r1, r2
 8003720:	4013      	ands	r3, r2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0b9      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003726:	4b6d      	ldr	r3, [pc, #436]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	496a      	ldr	r1, [pc, #424]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003734:	4313      	orrs	r3, r2
 8003736:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003738:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800373c:	2b01      	cmp	r3, #1
 800373e:	d105      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003740:	4b66      	ldr	r3, [pc, #408]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	4a65      	ldr	r2, [pc, #404]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003746:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800374a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003758:	4b60      	ldr	r3, [pc, #384]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800375a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800375c:	f023 0203 	bic.w	r2, r3, #3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	495d      	ldr	r1, [pc, #372]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003766:	4313      	orrs	r3, r2
 8003768:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d008      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003776:	4b59      	ldr	r3, [pc, #356]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	4956      	ldr	r1, [pc, #344]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003784:	4313      	orrs	r3, r2
 8003786:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	d008      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003794:	4b51      	ldr	r3, [pc, #324]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003798:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	494e      	ldr	r1, [pc, #312]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0320 	and.w	r3, r3, #32
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d008      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037b2:	4b4a      	ldr	r3, [pc, #296]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80037b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b6:	f023 0210 	bic.w	r2, r3, #16
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	4947      	ldr	r1, [pc, #284]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80037d0:	4b42      	ldr	r3, [pc, #264]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037dc:	493f      	ldr	r1, [pc, #252]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d008      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037ee:	4b3b      	ldr	r3, [pc, #236]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f2:	f023 0220 	bic.w	r2, r3, #32
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	4938      	ldr	r1, [pc, #224]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0308 	and.w	r3, r3, #8
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800380c:	4b33      	ldr	r3, [pc, #204]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800380e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003810:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	4930      	ldr	r1, [pc, #192]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800381a:	4313      	orrs	r3, r2
 800381c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0310 	and.w	r3, r3, #16
 8003826:	2b00      	cmp	r3, #0
 8003828:	d008      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800382a:	4b2c      	ldr	r3, [pc, #176]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	4929      	ldr	r1, [pc, #164]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003838:	4313      	orrs	r3, r2
 800383a:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003844:	2b00      	cmp	r3, #0
 8003846:	d008      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003848:	4b24      	ldr	r3, [pc, #144]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003854:	4921      	ldr	r1, [pc, #132]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003856:	4313      	orrs	r3, r2
 8003858:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003862:	2b00      	cmp	r3, #0
 8003864:	d008      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003866:	4b1d      	ldr	r3, [pc, #116]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003872:	491a      	ldr	r1, [pc, #104]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003874:	4313      	orrs	r3, r2
 8003876:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d008      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003884:	4b15      	ldr	r3, [pc, #84]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003888:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003890:	4912      	ldr	r1, [pc, #72]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003892:	4313      	orrs	r3, r2
 8003894:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d008      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80038a2:	4b0e      	ldr	r3, [pc, #56]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ae:	490b      	ldr	r1, [pc, #44]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80038c0:	4b06      	ldr	r3, [pc, #24]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038cc:	4903      	ldr	r1, [pc, #12]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3748      	adds	r7, #72	@ 0x48
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40021000 	.word	0x40021000

080038e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e09d      	b.n	8003a2e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d108      	bne.n	800390c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003902:	d009      	beq.n	8003918 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	61da      	str	r2, [r3, #28]
 800390a:	e005      	b.n	8003918 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d106      	bne.n	8003938 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7fd fbaa 	bl	800108c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2202      	movs	r2, #2
 800393c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800394e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003958:	d902      	bls.n	8003960 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800395a:	2300      	movs	r3, #0
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	e002      	b.n	8003966 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003960:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003964:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800396e:	d007      	beq.n	8003980 <HAL_SPI_Init+0xa0>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003978:	d002      	beq.n	8003980 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003990:	431a      	orrs	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	431a      	orrs	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039ae:	431a      	orrs	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039b8:	431a      	orrs	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039c2:	ea42 0103 	orr.w	r1, r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ca:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	0c1b      	lsrs	r3, r3, #16
 80039dc:	f003 0204 	and.w	r2, r3, #4
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e4:	f003 0310 	and.w	r3, r3, #16
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80039fc:	ea42 0103 	orr.w	r1, r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	69da      	ldr	r2, [r3, #28]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b088      	sub	sp, #32
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	60b9      	str	r1, [r7, #8]
 8003a40:	603b      	str	r3, [r7, #0]
 8003a42:	4613      	mov	r3, r2
 8003a44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d101      	bne.n	8003a58 <HAL_SPI_Transmit+0x22>
 8003a54:	2302      	movs	r3, #2
 8003a56:	e15f      	b.n	8003d18 <HAL_SPI_Transmit+0x2e2>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a60:	f7fd fcd8 	bl	8001414 <HAL_GetTick>
 8003a64:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003a66:	88fb      	ldrh	r3, [r7, #6]
 8003a68:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d002      	beq.n	8003a7c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003a76:	2302      	movs	r3, #2
 8003a78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a7a:	e148      	b.n	8003d0e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <HAL_SPI_Transmit+0x52>
 8003a82:	88fb      	ldrh	r3, [r7, #6]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d102      	bne.n	8003a8e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a8c:	e13f      	b.n	8003d0e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2203      	movs	r2, #3
 8003a92:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	88fa      	ldrh	r2, [r7, #6]
 8003aa6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	88fa      	ldrh	r2, [r7, #6]
 8003aac:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ad8:	d10f      	bne.n	8003afa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ae8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003af8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b04:	2b40      	cmp	r3, #64	@ 0x40
 8003b06:	d007      	beq.n	8003b18 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b20:	d94f      	bls.n	8003bc2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <HAL_SPI_Transmit+0xfa>
 8003b2a:	8afb      	ldrh	r3, [r7, #22]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d142      	bne.n	8003bb6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b34:	881a      	ldrh	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b40:	1c9a      	adds	r2, r3, #2
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b54:	e02f      	b.n	8003bb6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d112      	bne.n	8003b8a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b68:	881a      	ldrh	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b74:	1c9a      	adds	r2, r3, #2
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b88:	e015      	b.n	8003bb6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b8a:	f7fd fc43 	bl	8001414 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d803      	bhi.n	8003ba2 <HAL_SPI_Transmit+0x16c>
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ba0:	d102      	bne.n	8003ba8 <HAL_SPI_Transmit+0x172>
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d106      	bne.n	8003bb6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003bb4:	e0ab      	b.n	8003d0e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1ca      	bne.n	8003b56 <HAL_SPI_Transmit+0x120>
 8003bc0:	e080      	b.n	8003cc4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <HAL_SPI_Transmit+0x19a>
 8003bca:	8afb      	ldrh	r3, [r7, #22]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d174      	bne.n	8003cba <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d912      	bls.n	8003c00 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bde:	881a      	ldrh	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bea:	1c9a      	adds	r2, r3, #2
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	3b02      	subs	r3, #2
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003bfe:	e05c      	b.n	8003cba <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	330c      	adds	r3, #12
 8003c0a:	7812      	ldrb	r2, [r2, #0]
 8003c0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c12:	1c5a      	adds	r2, r3, #1
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003c26:	e048      	b.n	8003cba <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d12b      	bne.n	8003c8e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d912      	bls.n	8003c66 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c44:	881a      	ldrh	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c50:	1c9a      	adds	r2, r3, #2
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b02      	subs	r3, #2
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c64:	e029      	b.n	8003cba <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	330c      	adds	r3, #12
 8003c70:	7812      	ldrb	r2, [r2, #0]
 8003c72:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c78:	1c5a      	adds	r2, r3, #1
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c8c:	e015      	b.n	8003cba <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c8e:	f7fd fbc1 	bl	8001414 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d803      	bhi.n	8003ca6 <HAL_SPI_Transmit+0x270>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ca4:	d102      	bne.n	8003cac <HAL_SPI_Transmit+0x276>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d106      	bne.n	8003cba <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003cb8:	e029      	b.n	8003d0e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1b1      	bne.n	8003c28 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	6839      	ldr	r1, [r7, #0]
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 facd 	bl	8004268 <SPI_EndRxTxTransaction>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10a      	bne.n	8003cf8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	613b      	str	r3, [r7, #16]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	613b      	str	r3, [r7, #16]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	613b      	str	r3, [r7, #16]
 8003cf6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d002      	beq.n	8003d06 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	77fb      	strb	r3, [r7, #31]
 8003d04:	e003      	b.n	8003d0e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003d16:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3720      	adds	r7, #32
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <HAL_SPI_Transmit_DMA+0x20>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e0d4      	b.n	8003eea <HAL_SPI_Transmit_DMA+0x1ca>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d002      	beq.n	8003d5a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003d54:	2302      	movs	r3, #2
 8003d56:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d58:	e0c2      	b.n	8003ee0 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d002      	beq.n	8003d66 <HAL_SPI_Transmit_DMA+0x46>
 8003d60:	88fb      	ldrh	r3, [r7, #6]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d102      	bne.n	8003d6c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d6a:	e0b9      	b.n	8003ee0 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2203      	movs	r2, #3
 8003d70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	88fa      	ldrh	r2, [r7, #6]
 8003d84:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	88fa      	ldrh	r2, [r7, #6]
 8003d8a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003db6:	d10f      	bne.n	8003dd8 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dc6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003dd6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ddc:	4a45      	ldr	r2, [pc, #276]	@ (8003ef4 <HAL_SPI_Transmit_DMA+0x1d4>)
 8003dde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003de4:	4a44      	ldr	r2, [pc, #272]	@ (8003ef8 <HAL_SPI_Transmit_DMA+0x1d8>)
 8003de6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dec:	4a43      	ldr	r2, [pc, #268]	@ (8003efc <HAL_SPI_Transmit_DMA+0x1dc>)
 8003dee:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df4:	2200      	movs	r2, #0
 8003df6:	635a      	str	r2, [r3, #52]	@ 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003e06:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e10:	d82d      	bhi.n	8003e6e <HAL_SPI_Transmit_DMA+0x14e>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e1c:	d127      	bne.n	8003e6e <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10f      	bne.n	8003e4c <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003e3a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	085b      	lsrs	r3, r3, #1
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e4a:	e010      	b.n	8003e6e <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e5a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	085b      	lsrs	r3, r3, #1
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	3301      	adds	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e76:	4619      	mov	r1, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	330c      	adds	r3, #12
 8003e7e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e84:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003e86:	f7fd fc4d 	bl	8001724 <HAL_DMA_Start_IT>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d008      	beq.n	8003ea2 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e94:	f043 0210 	orr.w	r2, r3, #16
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	75fb      	strb	r3, [r7, #23]

    goto error;
 8003ea0:	e01e      	b.n	8003ee0 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eac:	2b40      	cmp	r3, #64	@ 0x40
 8003eae:	d007      	beq.n	8003ec0 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ebe:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0220 	orr.w	r2, r2, #32
 8003ece:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0202 	orr.w	r2, r2, #2
 8003ede:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	08003fcf 	.word	0x08003fcf
 8003ef8:	08003f29 	.word	0x08003f29
 8003efc:	08003feb 	.word	0x08003feb

08003f00 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f34:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f36:	f7fd fa6d 	bl	8001414 <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0320 	and.w	r3, r3, #32
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	d03b      	beq.n	8003fc2 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0220 	bic.w	r2, r2, #32
 8003f58:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0202 	bic.w	r2, r2, #2
 8003f68:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	2164      	movs	r1, #100	@ 0x64
 8003f6e:	6978      	ldr	r0, [r7, #20]
 8003f70:	f000 f97a 	bl	8004268 <SPI_EndRxTxTransaction>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d005      	beq.n	8003f86 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f7e:	f043 0220 	orr.w	r2, r3, #32
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10a      	bne.n	8003fa4 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003fba:	6978      	ldr	r0, [r7, #20]
 8003fbc:	f7ff ffaa 	bl	8003f14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003fc0:	e002      	b.n	8003fc8 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003fc2:	6978      	ldr	r0, [r7, #20]
 8003fc4:	f7fc f9c2 	bl	800034c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b084      	sub	sp, #16
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f7ff ff8f 	bl	8003f00 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003fe2:	bf00      	nop
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b084      	sub	sp, #16
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0203 	bic.w	r2, r2, #3
 8004006:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800400c:	f043 0210 	orr.w	r2, r3, #16
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f7ff ff79 	bl	8003f14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004022:	bf00      	nop
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b088      	sub	sp, #32
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	603b      	str	r3, [r7, #0]
 8004038:	4613      	mov	r3, r2
 800403a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800403c:	f7fd f9ea 	bl	8001414 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004044:	1a9b      	subs	r3, r3, r2
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	4413      	add	r3, r2
 800404a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800404c:	f7fd f9e2 	bl	8001414 <HAL_GetTick>
 8004050:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004052:	4b39      	ldr	r3, [pc, #228]	@ (8004138 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	015b      	lsls	r3, r3, #5
 8004058:	0d1b      	lsrs	r3, r3, #20
 800405a:	69fa      	ldr	r2, [r7, #28]
 800405c:	fb02 f303 	mul.w	r3, r2, r3
 8004060:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004062:	e054      	b.n	800410e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800406a:	d050      	beq.n	800410e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800406c:	f7fd f9d2 	bl	8001414 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	69fa      	ldr	r2, [r7, #28]
 8004078:	429a      	cmp	r2, r3
 800407a:	d902      	bls.n	8004082 <SPI_WaitFlagStateUntilTimeout+0x56>
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d13d      	bne.n	80040fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004090:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800409a:	d111      	bne.n	80040c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040a4:	d004      	beq.n	80040b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ae:	d107      	bne.n	80040c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040c8:	d10f      	bne.n	80040ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e017      	b.n	800412e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	3b01      	subs	r3, #1
 800410c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	4013      	ands	r3, r2
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	429a      	cmp	r2, r3
 800411c:	bf0c      	ite	eq
 800411e:	2301      	moveq	r3, #1
 8004120:	2300      	movne	r3, #0
 8004122:	b2db      	uxtb	r3, r3
 8004124:	461a      	mov	r2, r3
 8004126:	79fb      	ldrb	r3, [r7, #7]
 8004128:	429a      	cmp	r2, r3
 800412a:	d19b      	bne.n	8004064 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3720      	adds	r7, #32
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	20000004 	.word	0x20000004

0800413c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b08a      	sub	sp, #40	@ 0x28
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
 8004148:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800414a:	2300      	movs	r3, #0
 800414c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800414e:	f7fd f961 	bl	8001414 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004156:	1a9b      	subs	r3, r3, r2
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	4413      	add	r3, r2
 800415c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800415e:	f7fd f959 	bl	8001414 <HAL_GetTick>
 8004162:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	330c      	adds	r3, #12
 800416a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800416c:	4b3d      	ldr	r3, [pc, #244]	@ (8004264 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	4613      	mov	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	00da      	lsls	r2, r3, #3
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	0d1b      	lsrs	r3, r3, #20
 800417c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800417e:	fb02 f303 	mul.w	r3, r2, r3
 8004182:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004184:	e060      	b.n	8004248 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800418c:	d107      	bne.n	800419e <SPI_WaitFifoStateUntilTimeout+0x62>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d104      	bne.n	800419e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	b2db      	uxtb	r3, r3
 800419a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800419c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041a4:	d050      	beq.n	8004248 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041a6:	f7fd f935 	bl	8001414 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d902      	bls.n	80041bc <SPI_WaitFifoStateUntilTimeout+0x80>
 80041b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d13d      	bne.n	8004238 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80041ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041d4:	d111      	bne.n	80041fa <SPI_WaitFifoStateUntilTimeout+0xbe>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041de:	d004      	beq.n	80041ea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041e8:	d107      	bne.n	80041fa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004202:	d10f      	bne.n	8004224 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004222:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e010      	b.n	800425a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800423e:	2300      	movs	r3, #0
 8004240:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	3b01      	subs	r3, #1
 8004246:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689a      	ldr	r2, [r3, #8]
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	4013      	ands	r3, r2
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	429a      	cmp	r2, r3
 8004256:	d196      	bne.n	8004186 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3728      	adds	r7, #40	@ 0x28
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	20000004 	.word	0x20000004

08004268 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af02      	add	r7, sp, #8
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2200      	movs	r2, #0
 800427c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f7ff ff5b 	bl	800413c <SPI_WaitFifoStateUntilTimeout>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d007      	beq.n	800429c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004290:	f043 0220 	orr.w	r2, r3, #32
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e027      	b.n	80042ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2200      	movs	r2, #0
 80042a4:	2180      	movs	r1, #128	@ 0x80
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f7ff fec0 	bl	800402c <SPI_WaitFlagStateUntilTimeout>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d007      	beq.n	80042c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042b6:	f043 0220 	orr.w	r2, r3, #32
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e014      	b.n	80042ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f7ff ff34 	bl	800413c <SPI_WaitFifoStateUntilTimeout>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d007      	beq.n	80042ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042de:	f043 0220 	orr.w	r2, r3, #32
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e000      	b.n	80042ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e040      	b.n	8004388 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800430a:	2b00      	cmp	r3, #0
 800430c:	d106      	bne.n	800431c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7fc ff24 	bl	8001164 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2224      	movs	r2, #36	@ 0x24
 8004320:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 0201 	bic.w	r2, r2, #1
 8004330:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f9fc 	bl	8004738 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 f825 	bl	8004390 <UART_SetConfig>
 8004346:	4603      	mov	r3, r0
 8004348:	2b01      	cmp	r3, #1
 800434a:	d101      	bne.n	8004350 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e01b      	b.n	8004388 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800435e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800436e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 0201 	orr.w	r2, r2, #1
 800437e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 fa7b 	bl	800487c <UART_CheckIdleState>
 8004386:	4603      	mov	r3, r0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b088      	sub	sp, #32
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004398:	2300      	movs	r3, #0
 800439a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	431a      	orrs	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	69db      	ldr	r3, [r3, #28]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80043be:	f023 030c 	bic.w	r3, r3, #12
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6812      	ldr	r2, [r2, #0]
 80043c6:	6979      	ldr	r1, [r7, #20]
 80043c8:	430b      	orrs	r3, r1
 80043ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	430a      	orrs	r2, r1
 8004404:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4aa7      	ldr	r2, [pc, #668]	@ (80046a8 <UART_SetConfig+0x318>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d120      	bne.n	8004452 <UART_SetConfig+0xc2>
 8004410:	4ba6      	ldr	r3, [pc, #664]	@ (80046ac <UART_SetConfig+0x31c>)
 8004412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004414:	f003 0303 	and.w	r3, r3, #3
 8004418:	2b03      	cmp	r3, #3
 800441a:	d817      	bhi.n	800444c <UART_SetConfig+0xbc>
 800441c:	a201      	add	r2, pc, #4	@ (adr r2, 8004424 <UART_SetConfig+0x94>)
 800441e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004422:	bf00      	nop
 8004424:	08004435 	.word	0x08004435
 8004428:	08004441 	.word	0x08004441
 800442c:	08004447 	.word	0x08004447
 8004430:	0800443b 	.word	0x0800443b
 8004434:	2301      	movs	r3, #1
 8004436:	77fb      	strb	r3, [r7, #31]
 8004438:	e0b5      	b.n	80045a6 <UART_SetConfig+0x216>
 800443a:	2302      	movs	r3, #2
 800443c:	77fb      	strb	r3, [r7, #31]
 800443e:	e0b2      	b.n	80045a6 <UART_SetConfig+0x216>
 8004440:	2304      	movs	r3, #4
 8004442:	77fb      	strb	r3, [r7, #31]
 8004444:	e0af      	b.n	80045a6 <UART_SetConfig+0x216>
 8004446:	2308      	movs	r3, #8
 8004448:	77fb      	strb	r3, [r7, #31]
 800444a:	e0ac      	b.n	80045a6 <UART_SetConfig+0x216>
 800444c:	2310      	movs	r3, #16
 800444e:	77fb      	strb	r3, [r7, #31]
 8004450:	e0a9      	b.n	80045a6 <UART_SetConfig+0x216>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a96      	ldr	r2, [pc, #600]	@ (80046b0 <UART_SetConfig+0x320>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d124      	bne.n	80044a6 <UART_SetConfig+0x116>
 800445c:	4b93      	ldr	r3, [pc, #588]	@ (80046ac <UART_SetConfig+0x31c>)
 800445e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004460:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004464:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004468:	d011      	beq.n	800448e <UART_SetConfig+0xfe>
 800446a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800446e:	d817      	bhi.n	80044a0 <UART_SetConfig+0x110>
 8004470:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004474:	d011      	beq.n	800449a <UART_SetConfig+0x10a>
 8004476:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800447a:	d811      	bhi.n	80044a0 <UART_SetConfig+0x110>
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <UART_SetConfig+0xf8>
 8004480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004484:	d006      	beq.n	8004494 <UART_SetConfig+0x104>
 8004486:	e00b      	b.n	80044a0 <UART_SetConfig+0x110>
 8004488:	2300      	movs	r3, #0
 800448a:	77fb      	strb	r3, [r7, #31]
 800448c:	e08b      	b.n	80045a6 <UART_SetConfig+0x216>
 800448e:	2302      	movs	r3, #2
 8004490:	77fb      	strb	r3, [r7, #31]
 8004492:	e088      	b.n	80045a6 <UART_SetConfig+0x216>
 8004494:	2304      	movs	r3, #4
 8004496:	77fb      	strb	r3, [r7, #31]
 8004498:	e085      	b.n	80045a6 <UART_SetConfig+0x216>
 800449a:	2308      	movs	r3, #8
 800449c:	77fb      	strb	r3, [r7, #31]
 800449e:	e082      	b.n	80045a6 <UART_SetConfig+0x216>
 80044a0:	2310      	movs	r3, #16
 80044a2:	77fb      	strb	r3, [r7, #31]
 80044a4:	e07f      	b.n	80045a6 <UART_SetConfig+0x216>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a82      	ldr	r2, [pc, #520]	@ (80046b4 <UART_SetConfig+0x324>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d124      	bne.n	80044fa <UART_SetConfig+0x16a>
 80044b0:	4b7e      	ldr	r3, [pc, #504]	@ (80046ac <UART_SetConfig+0x31c>)
 80044b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80044b8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80044bc:	d011      	beq.n	80044e2 <UART_SetConfig+0x152>
 80044be:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80044c2:	d817      	bhi.n	80044f4 <UART_SetConfig+0x164>
 80044c4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80044c8:	d011      	beq.n	80044ee <UART_SetConfig+0x15e>
 80044ca:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80044ce:	d811      	bhi.n	80044f4 <UART_SetConfig+0x164>
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <UART_SetConfig+0x14c>
 80044d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80044d8:	d006      	beq.n	80044e8 <UART_SetConfig+0x158>
 80044da:	e00b      	b.n	80044f4 <UART_SetConfig+0x164>
 80044dc:	2300      	movs	r3, #0
 80044de:	77fb      	strb	r3, [r7, #31]
 80044e0:	e061      	b.n	80045a6 <UART_SetConfig+0x216>
 80044e2:	2302      	movs	r3, #2
 80044e4:	77fb      	strb	r3, [r7, #31]
 80044e6:	e05e      	b.n	80045a6 <UART_SetConfig+0x216>
 80044e8:	2304      	movs	r3, #4
 80044ea:	77fb      	strb	r3, [r7, #31]
 80044ec:	e05b      	b.n	80045a6 <UART_SetConfig+0x216>
 80044ee:	2308      	movs	r3, #8
 80044f0:	77fb      	strb	r3, [r7, #31]
 80044f2:	e058      	b.n	80045a6 <UART_SetConfig+0x216>
 80044f4:	2310      	movs	r3, #16
 80044f6:	77fb      	strb	r3, [r7, #31]
 80044f8:	e055      	b.n	80045a6 <UART_SetConfig+0x216>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a6e      	ldr	r2, [pc, #440]	@ (80046b8 <UART_SetConfig+0x328>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d124      	bne.n	800454e <UART_SetConfig+0x1be>
 8004504:	4b69      	ldr	r3, [pc, #420]	@ (80046ac <UART_SetConfig+0x31c>)
 8004506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004508:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800450c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004510:	d011      	beq.n	8004536 <UART_SetConfig+0x1a6>
 8004512:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004516:	d817      	bhi.n	8004548 <UART_SetConfig+0x1b8>
 8004518:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800451c:	d011      	beq.n	8004542 <UART_SetConfig+0x1b2>
 800451e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004522:	d811      	bhi.n	8004548 <UART_SetConfig+0x1b8>
 8004524:	2b00      	cmp	r3, #0
 8004526:	d003      	beq.n	8004530 <UART_SetConfig+0x1a0>
 8004528:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800452c:	d006      	beq.n	800453c <UART_SetConfig+0x1ac>
 800452e:	e00b      	b.n	8004548 <UART_SetConfig+0x1b8>
 8004530:	2300      	movs	r3, #0
 8004532:	77fb      	strb	r3, [r7, #31]
 8004534:	e037      	b.n	80045a6 <UART_SetConfig+0x216>
 8004536:	2302      	movs	r3, #2
 8004538:	77fb      	strb	r3, [r7, #31]
 800453a:	e034      	b.n	80045a6 <UART_SetConfig+0x216>
 800453c:	2304      	movs	r3, #4
 800453e:	77fb      	strb	r3, [r7, #31]
 8004540:	e031      	b.n	80045a6 <UART_SetConfig+0x216>
 8004542:	2308      	movs	r3, #8
 8004544:	77fb      	strb	r3, [r7, #31]
 8004546:	e02e      	b.n	80045a6 <UART_SetConfig+0x216>
 8004548:	2310      	movs	r3, #16
 800454a:	77fb      	strb	r3, [r7, #31]
 800454c:	e02b      	b.n	80045a6 <UART_SetConfig+0x216>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a5a      	ldr	r2, [pc, #360]	@ (80046bc <UART_SetConfig+0x32c>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d124      	bne.n	80045a2 <UART_SetConfig+0x212>
 8004558:	4b54      	ldr	r3, [pc, #336]	@ (80046ac <UART_SetConfig+0x31c>)
 800455a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004560:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004564:	d011      	beq.n	800458a <UART_SetConfig+0x1fa>
 8004566:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800456a:	d817      	bhi.n	800459c <UART_SetConfig+0x20c>
 800456c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004570:	d011      	beq.n	8004596 <UART_SetConfig+0x206>
 8004572:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004576:	d811      	bhi.n	800459c <UART_SetConfig+0x20c>
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <UART_SetConfig+0x1f4>
 800457c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004580:	d006      	beq.n	8004590 <UART_SetConfig+0x200>
 8004582:	e00b      	b.n	800459c <UART_SetConfig+0x20c>
 8004584:	2300      	movs	r3, #0
 8004586:	77fb      	strb	r3, [r7, #31]
 8004588:	e00d      	b.n	80045a6 <UART_SetConfig+0x216>
 800458a:	2302      	movs	r3, #2
 800458c:	77fb      	strb	r3, [r7, #31]
 800458e:	e00a      	b.n	80045a6 <UART_SetConfig+0x216>
 8004590:	2304      	movs	r3, #4
 8004592:	77fb      	strb	r3, [r7, #31]
 8004594:	e007      	b.n	80045a6 <UART_SetConfig+0x216>
 8004596:	2308      	movs	r3, #8
 8004598:	77fb      	strb	r3, [r7, #31]
 800459a:	e004      	b.n	80045a6 <UART_SetConfig+0x216>
 800459c:	2310      	movs	r3, #16
 800459e:	77fb      	strb	r3, [r7, #31]
 80045a0:	e001      	b.n	80045a6 <UART_SetConfig+0x216>
 80045a2:	2310      	movs	r3, #16
 80045a4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045ae:	d15b      	bne.n	8004668 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80045b0:	7ffb      	ldrb	r3, [r7, #31]
 80045b2:	2b08      	cmp	r3, #8
 80045b4:	d827      	bhi.n	8004606 <UART_SetConfig+0x276>
 80045b6:	a201      	add	r2, pc, #4	@ (adr r2, 80045bc <UART_SetConfig+0x22c>)
 80045b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045bc:	080045e1 	.word	0x080045e1
 80045c0:	080045e9 	.word	0x080045e9
 80045c4:	080045f1 	.word	0x080045f1
 80045c8:	08004607 	.word	0x08004607
 80045cc:	080045f7 	.word	0x080045f7
 80045d0:	08004607 	.word	0x08004607
 80045d4:	08004607 	.word	0x08004607
 80045d8:	08004607 	.word	0x08004607
 80045dc:	080045ff 	.word	0x080045ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045e0:	f7fe ff8c 	bl	80034fc <HAL_RCC_GetPCLK1Freq>
 80045e4:	61b8      	str	r0, [r7, #24]
        break;
 80045e6:	e013      	b.n	8004610 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045e8:	f7fe ffaa 	bl	8003540 <HAL_RCC_GetPCLK2Freq>
 80045ec:	61b8      	str	r0, [r7, #24]
        break;
 80045ee:	e00f      	b.n	8004610 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045f0:	4b33      	ldr	r3, [pc, #204]	@ (80046c0 <UART_SetConfig+0x330>)
 80045f2:	61bb      	str	r3, [r7, #24]
        break;
 80045f4:	e00c      	b.n	8004610 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045f6:	f7fe ff21 	bl	800343c <HAL_RCC_GetSysClockFreq>
 80045fa:	61b8      	str	r0, [r7, #24]
        break;
 80045fc:	e008      	b.n	8004610 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004602:	61bb      	str	r3, [r7, #24]
        break;
 8004604:	e004      	b.n	8004610 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8004606:	2300      	movs	r3, #0
 8004608:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	77bb      	strb	r3, [r7, #30]
        break;
 800460e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 8082 	beq.w	800471c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	005a      	lsls	r2, r3, #1
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	085b      	lsrs	r3, r3, #1
 8004622:	441a      	add	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	fbb2 f3f3 	udiv	r3, r2, r3
 800462c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	2b0f      	cmp	r3, #15
 8004632:	d916      	bls.n	8004662 <UART_SetConfig+0x2d2>
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800463a:	d212      	bcs.n	8004662 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	b29b      	uxth	r3, r3
 8004640:	f023 030f 	bic.w	r3, r3, #15
 8004644:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	085b      	lsrs	r3, r3, #1
 800464a:	b29b      	uxth	r3, r3
 800464c:	f003 0307 	and.w	r3, r3, #7
 8004650:	b29a      	uxth	r2, r3
 8004652:	89fb      	ldrh	r3, [r7, #14]
 8004654:	4313      	orrs	r3, r2
 8004656:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	89fa      	ldrh	r2, [r7, #14]
 800465e:	60da      	str	r2, [r3, #12]
 8004660:	e05c      	b.n	800471c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	77bb      	strb	r3, [r7, #30]
 8004666:	e059      	b.n	800471c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004668:	7ffb      	ldrb	r3, [r7, #31]
 800466a:	2b08      	cmp	r3, #8
 800466c:	d835      	bhi.n	80046da <UART_SetConfig+0x34a>
 800466e:	a201      	add	r2, pc, #4	@ (adr r2, 8004674 <UART_SetConfig+0x2e4>)
 8004670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004674:	08004699 	.word	0x08004699
 8004678:	080046a1 	.word	0x080046a1
 800467c:	080046c5 	.word	0x080046c5
 8004680:	080046db 	.word	0x080046db
 8004684:	080046cb 	.word	0x080046cb
 8004688:	080046db 	.word	0x080046db
 800468c:	080046db 	.word	0x080046db
 8004690:	080046db 	.word	0x080046db
 8004694:	080046d3 	.word	0x080046d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004698:	f7fe ff30 	bl	80034fc <HAL_RCC_GetPCLK1Freq>
 800469c:	61b8      	str	r0, [r7, #24]
        break;
 800469e:	e021      	b.n	80046e4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046a0:	f7fe ff4e 	bl	8003540 <HAL_RCC_GetPCLK2Freq>
 80046a4:	61b8      	str	r0, [r7, #24]
        break;
 80046a6:	e01d      	b.n	80046e4 <UART_SetConfig+0x354>
 80046a8:	40013800 	.word	0x40013800
 80046ac:	40021000 	.word	0x40021000
 80046b0:	40004400 	.word	0x40004400
 80046b4:	40004800 	.word	0x40004800
 80046b8:	40004c00 	.word	0x40004c00
 80046bc:	40005000 	.word	0x40005000
 80046c0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004734 <UART_SetConfig+0x3a4>)
 80046c6:	61bb      	str	r3, [r7, #24]
        break;
 80046c8:	e00c      	b.n	80046e4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ca:	f7fe feb7 	bl	800343c <HAL_RCC_GetSysClockFreq>
 80046ce:	61b8      	str	r0, [r7, #24]
        break;
 80046d0:	e008      	b.n	80046e4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046d6:	61bb      	str	r3, [r7, #24]
        break;
 80046d8:	e004      	b.n	80046e4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	77bb      	strb	r3, [r7, #30]
        break;
 80046e2:	bf00      	nop
    }

    if (pclk != 0U)
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d018      	beq.n	800471c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	085a      	lsrs	r2, r3, #1
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	441a      	add	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	2b0f      	cmp	r3, #15
 8004702:	d909      	bls.n	8004718 <UART_SetConfig+0x388>
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800470a:	d205      	bcs.n	8004718 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	b29a      	uxth	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	60da      	str	r2, [r3, #12]
 8004716:	e001      	b.n	800471c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004728:	7fbb      	ldrb	r3, [r7, #30]
}
 800472a:	4618      	mov	r0, r3
 800472c:	3720      	adds	r7, #32
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	007a1200 	.word	0x007a1200

08004738 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00a      	beq.n	8004762 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00a      	beq.n	80047a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047aa:	f003 0304 	and.w	r3, r3, #4
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00a      	beq.n	80047c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047cc:	f003 0310 	and.w	r3, r3, #16
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ee:	f003 0320 	and.w	r3, r3, #32
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004814:	2b00      	cmp	r3, #0
 8004816:	d01a      	beq.n	800484e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004832:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004836:	d10a      	bne.n	800484e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	605a      	str	r2, [r3, #4]
  }
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b098      	sub	sp, #96	@ 0x60
 8004880:	af02      	add	r7, sp, #8
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800488c:	f7fc fdc2 	bl	8001414 <HAL_GetTick>
 8004890:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0308 	and.w	r3, r3, #8
 800489c:	2b08      	cmp	r3, #8
 800489e:	d12e      	bne.n	80048fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048a4:	9300      	str	r3, [sp, #0]
 80048a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048a8:	2200      	movs	r2, #0
 80048aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f88c 	bl	80049cc <UART_WaitOnFlagUntilTimeout>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d021      	beq.n	80048fe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c2:	e853 3f00 	ldrex	r3, [r3]
 80048c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	461a      	mov	r2, r3
 80048d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80048da:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048e0:	e841 2300 	strex	r3, r2, [r1]
 80048e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1e6      	bne.n	80048ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2220      	movs	r2, #32
 80048f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e062      	b.n	80049c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b04      	cmp	r3, #4
 800490a:	d149      	bne.n	80049a0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800490c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004914:	2200      	movs	r2, #0
 8004916:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f856 	bl	80049cc <UART_WaitOnFlagUntilTimeout>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d03c      	beq.n	80049a0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492e:	e853 3f00 	ldrex	r3, [r3]
 8004932:	623b      	str	r3, [r7, #32]
   return(result);
 8004934:	6a3b      	ldr	r3, [r7, #32]
 8004936:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800493a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	461a      	mov	r2, r3
 8004942:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004944:	633b      	str	r3, [r7, #48]	@ 0x30
 8004946:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004948:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800494a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800494c:	e841 2300 	strex	r3, r2, [r1]
 8004950:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1e6      	bne.n	8004926 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	3308      	adds	r3, #8
 800495e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	e853 3f00 	ldrex	r3, [r3]
 8004966:	60fb      	str	r3, [r7, #12]
   return(result);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 0301 	bic.w	r3, r3, #1
 800496e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	3308      	adds	r3, #8
 8004976:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004978:	61fa      	str	r2, [r7, #28]
 800497a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497c:	69b9      	ldr	r1, [r7, #24]
 800497e:	69fa      	ldr	r2, [r7, #28]
 8004980:	e841 2300 	strex	r3, r2, [r1]
 8004984:	617b      	str	r3, [r7, #20]
   return(result);
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1e5      	bne.n	8004958 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2220      	movs	r2, #32
 8004990:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e011      	b.n	80049c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2220      	movs	r2, #32
 80049a4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2220      	movs	r2, #32
 80049aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3758      	adds	r7, #88	@ 0x58
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	4613      	mov	r3, r2
 80049da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049dc:	e04f      	b.n	8004a7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049e4:	d04b      	beq.n	8004a7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e6:	f7fc fd15 	bl	8001414 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d302      	bcc.n	80049fc <UART_WaitOnFlagUntilTimeout+0x30>
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e04e      	b.n	8004a9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0304 	and.w	r3, r3, #4
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d037      	beq.n	8004a7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	2b80      	cmp	r3, #128	@ 0x80
 8004a12:	d034      	beq.n	8004a7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	2b40      	cmp	r3, #64	@ 0x40
 8004a18:	d031      	beq.n	8004a7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	69db      	ldr	r3, [r3, #28]
 8004a20:	f003 0308 	and.w	r3, r3, #8
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d110      	bne.n	8004a4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2208      	movs	r2, #8
 8004a2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 f838 	bl	8004aa6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2208      	movs	r2, #8
 8004a3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e029      	b.n	8004a9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	69db      	ldr	r3, [r3, #28]
 8004a50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a58:	d111      	bne.n	8004a7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 f81e 	bl	8004aa6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e00f      	b.n	8004a9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69da      	ldr	r2, [r3, #28]
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	4013      	ands	r3, r2
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	bf0c      	ite	eq
 8004a8e:	2301      	moveq	r3, #1
 8004a90:	2300      	movne	r3, #0
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	461a      	mov	r2, r3
 8004a96:	79fb      	ldrb	r3, [r7, #7]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d0a0      	beq.n	80049de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b095      	sub	sp, #84	@ 0x54
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ab6:	e853 3f00 	ldrex	r3, [r3]
 8004aba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004abe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	461a      	mov	r2, r3
 8004aca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004acc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ace:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ad2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ad4:	e841 2300 	strex	r3, r2, [r1]
 8004ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1e6      	bne.n	8004aae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3308      	adds	r3, #8
 8004ae6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae8:	6a3b      	ldr	r3, [r7, #32]
 8004aea:	e853 3f00 	ldrex	r3, [r3]
 8004aee:	61fb      	str	r3, [r7, #28]
   return(result);
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	f023 0301 	bic.w	r3, r3, #1
 8004af6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3308      	adds	r3, #8
 8004afe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b08:	e841 2300 	strex	r3, r2, [r1]
 8004b0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1e5      	bne.n	8004ae0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d118      	bne.n	8004b4e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	e853 3f00 	ldrex	r3, [r3]
 8004b28:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	f023 0310 	bic.w	r3, r3, #16
 8004b30:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	461a      	mov	r2, r3
 8004b38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b3a:	61bb      	str	r3, [r7, #24]
 8004b3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3e:	6979      	ldr	r1, [r7, #20]
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	e841 2300 	strex	r3, r2, [r1]
 8004b46:	613b      	str	r3, [r7, #16]
   return(result);
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1e6      	bne.n	8004b1c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004b62:	bf00      	nop
 8004b64:	3754      	adds	r7, #84	@ 0x54
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b085      	sub	sp, #20
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004b76:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004b7a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	43db      	mvns	r3, r3
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	1d3b      	adds	r3, r7, #4
 8004bae:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <memset>:
 8004be0:	4402      	add	r2, r0
 8004be2:	4603      	mov	r3, r0
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d100      	bne.n	8004bea <memset+0xa>
 8004be8:	4770      	bx	lr
 8004bea:	f803 1b01 	strb.w	r1, [r3], #1
 8004bee:	e7f9      	b.n	8004be4 <memset+0x4>

08004bf0 <__libc_init_array>:
 8004bf0:	b570      	push	{r4, r5, r6, lr}
 8004bf2:	4d0d      	ldr	r5, [pc, #52]	@ (8004c28 <__libc_init_array+0x38>)
 8004bf4:	4c0d      	ldr	r4, [pc, #52]	@ (8004c2c <__libc_init_array+0x3c>)
 8004bf6:	1b64      	subs	r4, r4, r5
 8004bf8:	10a4      	asrs	r4, r4, #2
 8004bfa:	2600      	movs	r6, #0
 8004bfc:	42a6      	cmp	r6, r4
 8004bfe:	d109      	bne.n	8004c14 <__libc_init_array+0x24>
 8004c00:	4d0b      	ldr	r5, [pc, #44]	@ (8004c30 <__libc_init_array+0x40>)
 8004c02:	4c0c      	ldr	r4, [pc, #48]	@ (8004c34 <__libc_init_array+0x44>)
 8004c04:	f000 f818 	bl	8004c38 <_init>
 8004c08:	1b64      	subs	r4, r4, r5
 8004c0a:	10a4      	asrs	r4, r4, #2
 8004c0c:	2600      	movs	r6, #0
 8004c0e:	42a6      	cmp	r6, r4
 8004c10:	d105      	bne.n	8004c1e <__libc_init_array+0x2e>
 8004c12:	bd70      	pop	{r4, r5, r6, pc}
 8004c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c18:	4798      	blx	r3
 8004c1a:	3601      	adds	r6, #1
 8004c1c:	e7ee      	b.n	8004bfc <__libc_init_array+0xc>
 8004c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c22:	4798      	blx	r3
 8004c24:	3601      	adds	r6, #1
 8004c26:	e7f2      	b.n	8004c0e <__libc_init_array+0x1e>
 8004c28:	08005dd8 	.word	0x08005dd8
 8004c2c:	08005dd8 	.word	0x08005dd8
 8004c30:	08005dd8 	.word	0x08005dd8
 8004c34:	08005ddc 	.word	0x08005ddc

08004c38 <_init>:
 8004c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3a:	bf00      	nop
 8004c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c3e:	bc08      	pop	{r3}
 8004c40:	469e      	mov	lr, r3
 8004c42:	4770      	bx	lr

08004c44 <_fini>:
 8004c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c46:	bf00      	nop
 8004c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c4a:	bc08      	pop	{r3}
 8004c4c:	469e      	mov	lr, r3
 8004c4e:	4770      	bx	lr
